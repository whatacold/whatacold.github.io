<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>whatacold&#39;s space</title>
    <link>https://whatacold.io/</link>
    <description>Recent content on whatacold&#39;s space</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>whatacold@gmail.com (whatacold)</managingEditor>
    <webMaster>whatacold@gmail.com (whatacold)</webMaster>
    <lastBuildDate>Fri, 08 Nov 2024 00:18:02 +0800</lastBuildDate>
    <atom:link href="https://whatacold.io/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start a Clojure nREPL in the Command Line for Cider</title>
      <link>https://whatacold.io/blog/2024-11-08-cider-clojure-repl-cmdline/</link>
      <pubDate>Fri, 08 Nov 2024 00:02:56 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2024-11-08-cider-clojure-repl-cmdline/</guid>
      <description>While troubleshooting and fixing a live reload bug in Clay today, which requires to start a minimal Clojure environment, I figured out how to start a nREPL from the command line. Instead of using M-x cider-jack-in-clj directly from Emacs, actually we can manully bring up an nREPL with this: clj -Sdeps &amp;#34;{:deps {org.scicloj/clay {:mvn/version \&amp;#34;2-beta21\&amp;#34;} cider/cider-nrepl {:mvn/version \&amp;#34;0.50.2\&amp;#34;}}}&amp;#34; -m nrepl.cmdline --middleware &amp;#39;[cider.nrepl/cider-middleware]&amp;#39; (The clay part is only necessary for this debugging), and then connect to this nREPL using the Emacs command M-x cider-connect-clj.</description>
    </item>
    <item>
      <title>Join Every N Lines By A Separator in Emacs</title>
      <link>https://whatacold.io/blog/2023-11-25-emacs-join-every-n-lines/</link>
      <pubDate>Sat, 25 Nov 2023 12:24:24 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2023-11-25-emacs-join-every-n-lines/</guid>
      <description>It has been some time since I came along the idea of the w/join-lines command to join lines. After that, sometimes I found that it would be even better to join every a few lines.&#xA;Let&amp;#39;s see the example below, suppose we&amp;#39;ve copies some data from somewhere, and now we want to yank it into an Emacs buffer and slightly modify it to be like an matrix.&#xA;That is, make it from:</description>
    </item>
    <item>
      <title>Emacs winner-mode to restore your window layouts</title>
      <link>https://whatacold.io/blog/2023-11-19-emacs-winner-mode/</link>
      <pubDate>Sun, 19 Nov 2023 13:02:42 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2023-11-19-emacs-winner-mode/</guid>
      <description>If you&amp;#39;ve been using Emacs for a while, I bet you must have encountered the annoying problem that your Emacs window layout gets messed up by some operations, such as looking for a help (e.g. C-h k), or checking things in magit.&#xA;It&amp;#39;s ok to me if I can get back to a previous used layout. Emacs has built in a package for this package: winner-mode. It&amp;#39;s very simple, it only has three commands:</description>
    </item>
    <item>
      <title>Emphasize Text By Dragging Mouse in Org-mode</title>
      <link>https://whatacold.io/blog/2023-08-14-org-emphasis-dragging-mouse/</link>
      <pubDate>Mon, 14 Aug 2023 22:48:20 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2023-08-14-org-emphasis-dragging-mouse/</guid>
      <description>Long story short, I came up with an idea to emphasize content while I was reviewing an org-mode document a few months ago after I was tired of typing tedious * around the content repeatedly. And I&amp;#39;ve been longing for this feature since then, because I was unfamiliar with mouse-based key bindings, and neither did I have the time to investigate it.&#xA;Today I finally nailed it down while I was attending a boring meeting, and it turned out to be quite simple.</description>
    </item>
    <item>
      <title>Join Lines By A Separator in Emacs</title>
      <link>https://whatacold.io/blog/2023-06-12-emacs-join-lines/</link>
      <pubDate>Mon, 12 Jun 2023 22:23:12 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2023-06-12-emacs-join-lines/</guid>
      <description>So sometimes I need to join a few lines by a separator while I&amp;#39;m coding, for example, turn the below lines,&#xA;foo bar baz into foo + bar + baz. (This is a silly example, I will update if I come up with a better one :-P )&#xA;When I was in a rush in the past, I usually baked a keyboard macro temporarily and then applied it to achieve this goal, thought reliable, it&amp;#39;s a little bit cumbersome to record it.</description>
    </item>
    <item>
      <title>Hugo Blogging in Emacs</title>
      <link>https://whatacold.io/blog/2022-10-10-emacs-hugo-blogging/</link>
      <pubDate>Mon, 10 Oct 2022 22:50:48 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-10-10-emacs-hugo-blogging/</guid>
      <description>When I started to use Hugo to write this blog last year, I noticed that there is an easy-hugo package of Emacs that there are many people use it. So I installed it that time, but I didn&amp;#39;t use many of its features along the way. The only command I used was easy-hugo-current-time. I used it to update the Hugo timestamps manually as in the format of 2022-10-15T09:45:35+08:00.&#xA;My most desirable feature is to use it to select tags easily when I start to write a new post, but I never got it to work.</description>
    </item>
    <item>
      <title>Auto-complete Accounts From Other Beancount Files in Emacs</title>
      <link>https://whatacold.io/blog/2022-09-10-emacs-beancount-account-files/</link>
      <pubDate>Sat, 10 Sep 2022 11:13:38 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-09-10-emacs-beancount-account-files/</guid>
      <description>Auto-complete accounts from another accounts.bean file If you&amp;#39;re using Beancount with Emacs, you may be using beancount-mode. It can auto-complete the accounts defined in the current buffer when we are typing in new transactions so that we can do it more efficiently.&#xA;But it can only auto-complete the accounts from the current buffer, which makes it less useful when we have a stand-alone file or a few files of beancount accounts.</description>
    </item>
    <item>
      <title>A Bookmarklet for Copying a Link as an Org-mode Link</title>
      <link>https://whatacold.io/blog/2022-08-08-org-link-bookmarklet/</link>
      <pubDate>Mon, 08 Aug 2022 23:33:05 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-08-08-org-link-bookmarklet/</guid>
      <description>In this blog post, I&amp;#39;d like to share a bookmarklet for copying a web page&amp;#39;s URL as an org-mode link on Firefox, Chrome, or whatever web browsers support bookmarklets.&#xA;It&amp;#39;s handy when the URL isn&amp;#39;t SEO-friendly, which means you can&amp;#39;t tell what its content is about at first glance of the URL. So a little description text on the link would help.&#xA;Here is the bookmarklet:&#xA;javascript:window.prompt(&amp;#34;Copy to clipboard: Ctrl+C, Esc&amp;#34;, &amp;#34;[[&amp;#34; + document.</description>
    </item>
    <item>
      <title>Emacs Debugging Basics</title>
      <link>https://whatacold.io/blog/2022-07-17-emacs-elisp-debug/</link>
      <pubDate>Sun, 17 Jul 2022 09:57:31 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-07-17-emacs-elisp-debug/</guid>
      <description>If you are new to Emacs, you may run into some errors, especially after you absorb elisp snippets from the Internet or elsewhere.&#xA;Don&amp;#39;t panic. It happens. To ease your pain, in this post I will introduce some Emacs built-in features to help you solve the problems yourself.&#xA;Start Emacs Without Any Configurations When you have some problems/errors with built-in features, the first thing you should do is to run emacs -Q to start another Emacs instance without any configurations from your emacs.</description>
    </item>
    <item>
      <title>Duplicate the current line in Emacs</title>
      <link>https://whatacold.io/blog/2022-05-23-emacs-duplicate-line/</link>
      <pubDate>Mon, 23 May 2022 21:29:28 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-05-23-emacs-duplicate-line/</guid>
      <description>Duplicate the current in Emacs Duplicating the current line is frequent editing for me when I am coding. Initially, I copied a snippet as a command in Emacs from the Internet:&#xA;(defun w/duplicate-line() &amp;#34;Duplicate the current line.&amp;#34; (interactive) (move-beginning-of-line 1) (kill-line) (yank) (open-line 1) (next-line 1) (yank)) Most of the time, I was happy with it, but it has mainly two drawbacks:&#xA;It cannot keep the column position when moving to the next line It messes up with the yank ring as it yanks the text under the hood So today, I took some time to fix these two problems, and I also want it to be capable of commenting the current line out if I prefix the command.</description>
    </item>
    <item>
      <title>Adjust the laptop&#39;s screen brightness in Emacs</title>
      <link>https://whatacold.io/blog/2022-05-21-adjust-screen-brightness-emacs/</link>
      <pubDate>Sat, 21 May 2022 11:50:25 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-05-21-adjust-screen-brightness-emacs/</guid>
      <description>Adjust the screen brightness in Emacs If you&amp;#39;re using i3wm on Linux, how do you adjust the laptop&amp;#39;s screen brightness?&#xA;Most of the time, I use the laptop with an external monitor. But when I am out, I have no monitors. And it seems no easy way to adjust the brightness in i3wm. Being too bright or dim is terrible for the eyes.&#xA;Recently, I found a command-line tool called brightnessctl, which can adjust the brightness in a terminal.</description>
    </item>
    <item>
      <title>How to Kill a &#34;Visible&#34; Buffer Quickly in Emacs</title>
      <link>https://whatacold.io/blog/2022-04-09-emacs-kill-other-buffer/</link>
      <pubDate>Sat, 09 Apr 2022 23:11:36 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-04-09-emacs-kill-other-buffer/</guid>
      <description>Selecting Emacs windows using ace-window Recently I&amp;#39;ve been building a simple Emacs config for myself, along the way I re-discovered some fantastic packages, for example, I found that ace-window is a simple yet powerful package to enhance the default other-window command to select other windows quickly when it has more than two windows in a frame.&#xA;I replaced the key binding of other-window to ace-window by simply doing (global-set-key (kbd &amp;#34;C-x o&amp;#34;) #&amp;#39;ace-window), then when there are &amp;gt;2 windows, it will show a white-in-red number at the top-left corner for every window, hit the number (1, 2, 3, …) and then Emacs will select the corresponding window (as demonstrated in the above screenshot).</description>
    </item>
    <item>
      <title>How to append items to the CSV file without header row?</title>
      <link>https://whatacold.io/blog/2022-04-09-scrapy-csv-without-header/</link>
      <pubDate>Sat, 09 Apr 2022 22:32:11 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-04-09-scrapy-csv-without-header/</guid>
      <description>Scrapy Architecture Scrapy provides a few item exporters by default to export items in commonly used file formats like CSV/JSON/XML. I usually use CSV to export items, it is pretty convenient, and it comes in two ways:&#xA;appending mode, for example, scrapy crawl foo -o test.csv overwriting mode with -O option, like scrapy crawl foo -O test.csv But in the appending mode, it&amp;#39;s a bit annoying that it always appends the header row before the newly scraped items, which is not correctly in terms of CSV format.</description>
    </item>
    <item>
      <title>About</title>
      <link>https://whatacold.io/about/</link>
      <pubDate>Wed, 09 Mar 2022 12:37:20 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/about/</guid>
      <description>Hi, I&amp;#39;m Ken Huang, a C/C++/Python software engineer who loves Emacs/Clojure and is also interested in front-end development.&#xA;Besides, I am making videos about Emacs on my YouTube channel. Subscribe and stay tuned!&#xA;Open source projects that I contributed:&#xA;🍪Qtile, A full-featured, hackable tiling window manager written and configured in Python Doxygen, the de facto standard tool for generating documentation from annotated C++ sources Some interesting projects that I created:</description>
    </item>
    <item>
      <title>Eglot for Better Programming Experience in Emacs</title>
      <link>https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/</link>
      <pubDate>Sat, 22 Jan 2022 11:36:18 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/</guid>
      <description>LSP, or Language Server Protocol, makes programming easier by introducing features like more precise auto-completion and definition lookup. It may have scratched your itches, and you may wonder what the experience is like in Emacs.&#xA;Emacs has mainly two LSP clients out there, eglot and lsp-mode. Eglot is lightweight, and it could almost run out of the box. So in this post I will briefly show you how to use eglot.</description>
    </item>
    <item>
      <title>How to Reload i3status config On the Fly</title>
      <link>https://whatacold.io/blog/2022-01-14-i3wm-i3status-reload-config/</link>
      <pubDate>Fri, 14 Jan 2022 22:36:13 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-01-14-i3wm-i3status-reload-config/</guid>
      <description>Sometimes I want to change the status (i3status) of i3wm temporarily, but it seems that i3wm doesn&amp;#39;t support it directly, although reloading the config for i3wm itself is a piece of cake (bindsym $mod+Shift+c reload in the config, or i3-msg -t command reload in the command line).&#xA;But this issue scratched my itch, and I swear that I must solve it today.&#xA;Following this Reddit post, it looks like it can be done by restarting the process of i3bar:</description>
    </item>
    <item>
      <title>Language Shadowing with subed in Emacs</title>
      <link>https://whatacold.io/blog/2022-01-12-language-shadowing-with-subed-emacs/</link>
      <pubDate>Wed, 12 Jan 2022 21:41:54 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-01-12-language-shadowing-with-subed-emacs/</guid>
      <description>So I&amp;#39;m trying to improve my English speaking skill by shadowing while watching TV episodes. The workflow before was to loop over video clips using mpv:&#xA;hit l to mark the start of the loop play the video and wait for it to be at the end of the loop hit l again to mark the end Then mpv will loop over the clip, it basically works, but it&amp;#39;s a bit hard and tedious to set the start and end precisely.</description>
    </item>
    <item>
      <title>Writing a Python Script in Emacs in 45 Minutes!</title>
      <link>https://whatacold.io/blog/2021-12-11-writing-python-in-emacs/</link>
      <pubDate>Sat, 11 Dec 2021 09:24:53 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-12-11-writing-python-in-emacs/</guid>
      <description>Note: watch my live coding session of this article: Intro If you&amp;#39;ve heard some rumors of Emacs that it has a very steep learning curve (or that Emacs makes a computer slow), you may be too scared to look at it. It indeed has some learning curve (learning anything does have one), but it isn&amp;#39;t very steep. I learned this after getting my hands dirty with Emacs a few years ago.</description>
    </item>
    <item>
      <title>Beautiful Soup 4 Cheatsheet</title>
      <link>https://whatacold.io/blog/2021-12-05-beautifulsoup4-cheatsheet/</link>
      <pubDate>Sat, 25 Sep 2021 23:01:40 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-12-05-beautifulsoup4-cheatsheet/</guid>
      <description>Beautiful Soup Detailed docs: the Beautiful Soup 4 Docs.&#xA;Assume t is an object of Tag.&#xA;Core concepts (classes) Tag, a Tag object corresponds to an XML or HTML tag. BeautifulSoup, the BeautifulSoup object represents the parsed document as a whole. You can treat it like a special Tag. It needs a parser to parse the document, a built-in parser is &amp;#34;html.parser&amp;#34;, e.g. soup = BeautifulSoup(&amp;#34;&amp;lt;html&amp;gt;a web page&amp;lt;/html&amp;gt;&amp;#34;, &amp;#39;html.parser&amp;#39;) NavigableString, a string corresponds to a bit of text (as you see it in the browser) within a tag.</description>
    </item>
    <item>
      <title>Clojure reduce: one case for text processing</title>
      <link>https://whatacold.io/blog/2021-09-19-clojure-reduce-text-processing/</link>
      <pubDate>Sun, 19 Sep 2021 10:39:23 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-09-19-clojure-reduce-text-processing/</guid>
      <description>As a practice, I managed to illustrate Clojure files using illustrate.clj, but my original idea was to annotate org-mode files of blogs. It&amp;#39;s not uncommon that a blog post has some code snippets.&#xA;But it missed the feature until last night, as I wasn&amp;#39;t sure how to implement it appropriately before and didn&amp;#39;t have enough time.&#xA;For example, I may have an org-mode like this:&#xA;sum of two numbers: #+begin_src clojure (+ 1 2) #+end_src I want to have a result comment ((;; =&amp;gt; 3)) after each top-level form after using illustrate.</description>
    </item>
    <item>
      <title>illustrate.clj to Illustrate Clojure Snippet</title>
      <link>https://whatacold.io/blog/2021-08-07-illustrate-clojure-snippet/</link>
      <pubDate>Sat, 07 Aug 2021 18:49:25 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-08-07-illustrate-clojure-snippet/</guid>
      <description>To get my hands dirty with Clojure, I am trying to find or implement Clojure&amp;#39;s string functions in the sense of Python. Python has powerful string APIs, and I also want to see how powerful Clojure could be in this field. That would be interesting.&#xA;As shown in the cheatsheet, Clojure has implemented most of them, and there are some that I have to implement myself, like title-case.&#xA;Along the way, I found it was a little cumbersome to append the evaluation result and the result of calling them, for example,</description>
    </item>
    <item>
      <title>String Title Case in Clojure</title>
      <link>https://whatacold.io/blog/2021-07-25-clojure-string-title-case/</link>
      <pubDate>Sun, 25 Jul 2021 11:51:39 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-07-25-clojure-string-title-case/</guid>
      <description>These days I like to write scripts for some tasks in Python instead of shell. One important reason I think that&amp;#39;s because Python is powerful at string manipulation.&#xA;Recently I&amp;#39;m learning Clojure, and I&amp;#39;m trying to find similar ways in Clojure, one of them is s.title() for getting a title-cased version of a string. For example,&#xA;&amp;gt;&amp;gt;&amp;gt; &amp;#39; Hello world&amp;#39;.title() &amp;#39; Hello World&amp;#39; How to do that in Clojure? To make the problem simple, let&amp;#39;s assume that the input string only has letters and spaces, that is, [a-zA-Z ] in regex pattern.</description>
    </item>
    <item>
      <title>String Manipulation in Clojure</title>
      <link>https://whatacold.io/blog/2021-07-22-clojure-string-manipulation/</link>
      <pubDate>Thu, 22 Jul 2021 23:29:11 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-07-22-clojure-string-manipulation/</guid>
      <description>Python string APIs are powerful and concise, that is an important reason I use it to do a lot of scripting these days, join, split, strip, to name a few.&#xA;Since I am learning Clojure recently, I am wondering, how is string manipulation like in Clojure and how to implement equivalent ones?&#xA;I think it&amp;#39;s an excellent opportunity to get familiar with Clojure. Before diving into the implementation, how to declare a multi-line string?</description>
    </item>
    <item>
      <title>Send Notifications from Emacs with i3wm and Dunst</title>
      <link>https://whatacold.io/blog/2021-07-17-emacs-i3wm-dunst/</link>
      <pubDate>Sat, 17 Jul 2021 12:22:10 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-07-17-emacs-i3wm-dunst/</guid>
      <description>I barely use notifications, but recently I think it&amp;#39;s a valuable way to remind me things like helping me nurture habits, or to notify me of emergencies like a critically low laptop battery.&#xA;So I try to integrate notifications to org-mode and Emacs today.&#xA;The org-notify package from org-contrib (install it by (package-install &amp;#39;org-contrib) ) could do this job easily before, so I first test it in the minibuffer with (org-notify &amp;#34;test&amp;#34;).</description>
    </item>
    <item>
      <title>A Random Password Generator in Babashka</title>
      <link>https://whatacold.io/blog/2021-07-11-babashka-random-password-generator/</link>
      <pubDate>Sun, 11 Jul 2021 09:18:41 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-07-11-babashka-random-password-generator/</guid>
      <description>I&amp;#39;m used to learning by practicing, so when I learned Clojure, I always kept an eye on chances to write code in it.&#xA;Scripting is an excellent field to practice, but the experience is not so good. On the one hand, it&amp;#39;s too hacky to wrap Clojure code in a shell script with the shell bang. On the other hand, the startup time of JVM is too long to hurt the user experience.</description>
    </item>
    <item>
      <title>An Online Python re.findall Service</title>
      <link>https://whatacold.io/blog/2020-10-21-a-python-re.findall-service/</link>
      <pubDate>Wed, 21 Oct 2020 22:51:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-10-21-a-python-re.findall-service/</guid>
      <description>As a programmer, I know that grep, sed and awk are powerful for processing text, but they sometimes aren&amp;#39;t that straight-forward for specific tasks, as I need to think about how to filter the lines and the columns out.&#xA;So I wonder if there is a handy way to do these tasks?&#xA;After using it for a while, I think using regex directly can help, so I launched a re.</description>
    </item>
    <item>
      <title>Generate Call Graphs Using Doxygen in Emacs</title>
      <link>https://whatacold.io/blog/2020-08-22-generate-call-graphs-using-doxygen-in-emacs/</link>
      <pubDate>Sat, 22 Aug 2020 18:57:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-08-22-generate-call-graphs-using-doxygen-in-emacs/</guid>
      <description>Doxygen is a nice tool for generating documentations for well-annotated C/C++ projects, the one feature that I like most is generating call graphs and class diagrams, so that I can learn a project quickly by browsing the diagrams from a higher point of view.&#xA;I take the following steps to generate call graphs for a project on terminals on Linux:&#xA;cd /path/to/a/project/, and generate a template config file by doxygen -s -g doxygen.</description>
    </item>
    <item>
      <title>Is It Safe to Use Redis As a Data Store?</title>
      <link>https://whatacold.io/blog/2020-06-25-is-it-safe-to-use-redis-as-a-data-store/</link>
      <pubDate>Thu, 25 Jun 2020 22:37:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-06-25-is-it-safe-to-use-redis-as-a-data-store/</guid>
      <description>Traditionally we are used to storing data in an RDBMS like MySQL, and avoid using in-memory solutions such as Redis, to have a confidence of no data loss. Sometimes I find that we are so stubborn with MySQL that ending up with a complicated design, and I&amp;#39;ve even seen a solution that stores data in MySQL and then using Redis as a cache for it to improve read performance in the meanwhile.</description>
    </item>
    <item>
      <title>A Trick to Troubleshoot Emacs Subprocess Creating</title>
      <link>https://whatacold.io/blog/2020-05-30-a-trick-to-troubleshoot-emacs-subprocess-creating/</link>
      <pubDate>Sat, 30 May 2020 11:52:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-05-30-a-trick-to-troubleshoot-emacs-subprocess-creating/</guid>
      <description>There are many packages of Emacs that leverage subprocesses to do their jobs, Magit, eglot, elpy, to name a few. And there are times that a subprocess doesn&amp;#39;t work as expected, for example, Magit is slow, and you&amp;#39;re sure that it&amp;#39;s ok when running git commands on shell. So how to spot these problems effectively and quickly?&#xA;The problem is that we don&amp;#39;t know what&amp;#39;s going on exactly, so here I want to share a few Elisp advices to make the subprocess creating visible, and print the exact program and its arguments to the *Message* buffer.</description>
    </item>
    <item>
      <title>ppcompile: An Emacs Package to Help Coding Locally</title>
      <link>https://whatacold.io/blog/2020-03-07-ppcompile-to-help-stay-coding-locally/</link>
      <pubDate>Sat, 07 Mar 2020 23:50:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-03-07-ppcompile-to-help-stay-coding-locally/</guid>
      <description>If you are a C/C++ programmer like me, you may experience jumping around different machines to write and compile your code, or you may write code on different machines for different projects, and scp/rsync/ftp the projects around. It works, but it&amp;#39;s a bit tedious and takes too much burden on our brains.&#xA;For example, say I have two projects that should be compiled on their compiling machines respectively. There are two obvious workflows for writing code for them &amp;#34;simultaneously&amp;#34;:</description>
    </item>
    <item>
      <title>The Binary Search Idea for Narrowing Down Problem Space</title>
      <link>https://whatacold.io/blog/2020-02-04-binary-search-algorithm-vs-problem-solving/</link>
      <pubDate>Tue, 04 Feb 2020 18:48:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-02-04-binary-search-algorithm-vs-problem-solving/</guid>
      <description>Binary search algorithm is a search algorithm that finds the position of a target value within a sorted array. It cuts off the target array in half in a pass, so that it has a worst-case performance of O(log n).&#xA;Visualization of the binary search algorithm where 7 is the target value(@wikipedia) We all know that it&amp;#39;s an efficient searching algorithm, but the strategy behind it also applies for narrowing down other problem space, for example, finding out when a bug is first introduced in a series of git commits.</description>
    </item>
    <item>
      <title>Manage SSH Connections with ~/.ssh/config</title>
      <link>https://whatacold.io/blog/2019-12-22-manage-ssh-connections-with-ssh-config/</link>
      <pubDate>Sun, 22 Dec 2019 18:52:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-12-22-manage-ssh-connections-with-ssh-config/</guid>
      <description>I used to manage SSH connection with such GUI apps as MobaXterm, when I wrote code on Windows at work. As I changed my workflow to use a tiling window manager in a VirtualBox guest OS, I continued to improve my way of managing SSH connections, which I want to share here if you don&amp;#39;t know yet.&#xA;At first, I baked a helper Python script, which I named as qssh for &amp;#34;quick ssh&amp;#34;, to help me assemble ssh arguments for me(such as username, Ip, port, etc.</description>
    </item>
    <item>
      <title>Why Can&#39;t Git Fetch Remote Branches Other Than Master?</title>
      <link>https://whatacold.io/blog/2019-12-01-why-cant-git-fetch-remote-branches-other-than-master/</link>
      <pubDate>Sun, 01 Dec 2019 16:00:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-12-01-why-cant-git-fetch-remote-branches-other-than-master/</guid>
      <description>Last week I came into a problem with Git, that I can&amp;#39;t fetch the remote branch that I just pushed to. It was so weird because I can push it. It never happens before, and it happened when I was in a rush to rebase my code, as someone in my team pushed his code.&#xA;After searching, it seemed that the configuration of fetch of that repo was different(this Stack Overflow thread for example) than before, it was specified that only master can be fetched.</description>
    </item>
    <item>
      <title>Open New Urxvt from within Emacs</title>
      <link>https://whatacold.io/blog/2019-11-25-start-a-new-urxvt-terminal-on-emacs/</link>
      <pubDate>Mon, 25 Nov 2019 22:47:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-11-25-start-a-new-urxvt-terminal-on-emacs/</guid>
      <description>I have been really enjoying the more concentration workflow qtile, a tiling window manager, brings me, since I started using it a few months ago. I am more focus on the current task now as all the windows I care about are laid out on the same screen.&#xA;As I get more used to qtile at every day&amp;#39;s work, I noticed that I became more depend on short-life terminal sessions.</description>
    </item>
    <item>
      <title>Build Docker Images for Qtile</title>
      <link>https://whatacold.io/blog/2019-10-07-build-docker-images-for-qtile/</link>
      <pubDate>Mon, 07 Oct 2019 13:25:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-10-07-build-docker-images-for-qtile/</guid>
      <description>One of Docker&amp;#39;s use cases is to set up identical development environments easily and quickly for a dev team. Recently, I had an opportunity to give it a try, and build Docker images for Qtile, as it didn&amp;#39;t have one yet as I get involved. With the images, it&amp;#39;s easy to set up the environment to easily run the tests, and build the documentation.&#xA;The best way to have a basic idea of Docker is to think it like a chroot environment, as Chris Tankersley stated in his Docker for Developers.</description>
    </item>
    <item>
      <title>How To Run Bleeding-edge Qtile Within a Virtualenv</title>
      <link>https://whatacold.io/blog/2019-09-29-how-to-run-the-bleeding-edge-code-of-qtile/</link>
      <pubDate>Sun, 29 Sep 2019 17:05:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-09-29-how-to-run-the-bleeding-edge-code-of-qtile/</guid>
      <description>For having been using GNOME for quite a long time, I was considering trying some tiling window managers to see what it&amp;#39;s like a few weeks ago. Along the way, I found a nice window manager written in Python: Qtile, what interests me most is that it&amp;#39;s a hackable window manager, which makes it flexible to extend or change its behaviors.&#xA;Well, switching to use a tiling window manager is far simpler than I thought.</description>
    </item>
    <item>
      <title>How To Revert a Series of Git Commits?</title>
      <link>https://whatacold.io/blog/2019-09-24-how-to-revert-a-series-of-commits-with-git/</link>
      <pubDate>Tue, 24 Sep 2019 23:14:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-09-24-how-to-revert-a-series-of-commits-with-git/</guid>
      <description>Sometimes, I need to revert a series of commits that I&amp;#39;ve already pushed, doing a git hard reset (git reset --hard) is not an option, as someone may already have new commits based on mine.&#xA;For example, assume that I&amp;#39;ve made a few commits like below:&#xA;65a2c62 * commit 10 25cad43 * commit 9 72ad583 * commit 8 ceebf9a * commit 7 acf8a11 * commit 6 28d526f * commit 5 63af1e2 * commit 4 982c71c * commit 3 0fb4c2d * commit 2 acf9da1 * commit 1 b5f9933 * commit 0 For whatever reason, I need to &amp;#34;drop&amp;#34; the changes made by commit 6 to commit 10, that is, go back to &amp;#34;commit 5&amp;#34; without deleting these commits.</description>
    </item>
    <item>
      <title>How to Change Web Page Titles Easily</title>
      <link>https://whatacold.io/blog/2019-08-18-how-to-rename-web-page-titles-in-a-lightweight-way/</link>
      <pubDate>Sun, 18 Aug 2019 14:57:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-08-18-how-to-rename-web-page-titles-in-a-lightweight-way/</guid>
      <description>There are times that I need to open many web pages of some specific websites within a browser, and there are so many tabs that I can&amp;#39;t efficiently access one of them, as their favicons are all the same.&#xA;So I tried to find a way to rename their titles, preferably in a lightweight way, so that I can spot them quickly with my eyes.&#xA;The first thought came into my mind was to find some browser extensions to do the job.</description>
    </item>
    <item>
      <title>Generating org-mode Outlines for wikiHow Articles</title>
      <link>https://whatacold.io/blog/2019-07-20-generating-org-mode-outlines-for-wikihow-articles/</link>
      <pubDate>Sat, 20 Jul 2019 20:04:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-07-20-generating-org-mode-outlines-for-wikihow-articles/</guid>
      <description>Recently I found some great articles on wikiHow, then I want to keep notes of them in org-mode files.&#xA;At first, I manually copied the ToC of articles, but soon I found it&amp;#39;s tedious and takes a lot of time. Today I wrote a requests-based Python script to help me extract the ToCs (Table of Content) into org-mode outlines. It takes two arguments, the first one is the URL, the second one is the containing heading&amp;#39;s level for the generated ToC in org-mode.</description>
    </item>
    <item>
      <title>Understanding align-regexp of Emacs</title>
      <link>https://whatacold.io/blog/2019-07-20-understanding-align-regexp-of-emacs/</link>
      <pubDate>Sat, 20 Jul 2019 13:50:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-07-20-understanding-align-regexp-of-emacs/</guid>
      <description>Emacs&amp;#39; M-x align-regex is neat when I want to align some similar text, especially when we&amp;#39;re coding. I use its trivial version(without prefix arg) regularly on day-to-day programming work before.&#xA;For example, I can use it to align below code quickly by:&#xA;Choose the region M-x align-regexp and type = and Enter aaaaaaaaaaaaaa = fields[0] bbb = fields[1] cccccccc = fields[2] It will be aligned to below code, now it&amp;#39;s better to read:</description>
    </item>
    <item>
      <title>ER Diagrams in Plain Text</title>
      <link>https://whatacold.io/blog/2019-07-06-render-erd-on-the-web/</link>
      <pubDate>Sat, 06 Jul 2019 11:59:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-07-06-render-erd-on-the-web/</guid>
      <description>If you ever wonder how to plot ER diagrams in plain text, you may have already heard of erd. It&amp;#39;s a cool command line program written by Andrew Gallant in Haskell, to &amp;#34;compile&amp;#34; plain text files into nicely looking images, leveraging the power of GraphViz.&#xA;I&amp;#39;ve used erd for some time, it&amp;#39;s cool and the syntax is quite simple. It&amp;#39;s also quite simple to install it on Linux, just install GraphViz and erd itself, by following the instructions in the README page.</description>
    </item>
    <item>
      <title>Fine-tune Curly Braces Style of Yasnippet Snippet on the Fly</title>
      <link>https://whatacold.io/blog/2019-02-24-fine-tune-style-of-yasnippet-snippet-on-the-fly/</link>
      <pubDate>Sun, 24 Feb 2019 16:48:00 +0800</pubDate><author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-02-24-fine-tune-style-of-yasnippet-snippet-on-the-fly/</guid>
      <description>Yasnippet is a good friend to help us type less and write more, whenever we write some text snippets repeatedly. And there is also an official repository called yasnippet-snippets that contains various snippets for many programming languages (modes), so that we can have many snippets in no time by installing it.&#xA;But there is a little problem when it comes to conforming to different coding styles.&#xA;Take the if snippet for example, normally it will generate code like this:</description>
    </item>
  </channel>
</rss>
