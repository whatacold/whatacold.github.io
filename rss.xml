<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>whatacold's blog site</title>
<description>whatacold's blog site</description>
<link>https://whatacold.github.io/</link>
<lastBuildDate>Sat, 11 Apr 2020 23:04:25 +0800</lastBuildDate>
<item>
  <title>Emacs 中使用 ppcompile 进行远程编译</title>
  <description><![CDATA[
<p>
不同于 Python 之类的项目， C/C++ 的项目需要有专门的编译环境，一般国内公司都会搭建特定的编译环境机器，把一些私有的库等依赖放在上面。而这些编译环境的工具链一般都比较老旧，有的编译环境可能还无法访问外网，甚至也没有提供代理间接访问外网。因此想要在这样的环境中使用 Emacs 开发代码着实不是一件容易的事。
</p>

<p>
一个可行的方法是在自己的工作机器上维护一个开发环境跑 Emacs ，需要编译的时候把代码同步到编译机器（使用 sshfs 、 sftp 等），编译过程中发现的编译问题，在本地修复好之后，再次同步，如此往复。
</p>

<p>
但是有一个问题，整个流程太过繁琐，需要不停地手工同步。即使像 sshfs 这样无须同步的方式，在本地编辑时偶尔卡顿会比较明显。最让人无法接受的是，在修复编译的过程中，需要手工定位到具体的文件及行数，繁琐而且效率低。
</p>

<p>
你可能会说为什么不用 Tramp 模式直接在远端的编译环境中直接编辑文件呢？的确， Tramp 编辑代码没有问题，体验也挺流畅的，但它无法解决你无法自由控制远端环境这个缺点，比如你想集成 <code>ag/rg</code> 到 Emacs 中，光安装程序可能就很折腾；而且如果公司有多套编译环境时，每个环境都维护 Emacs 会是一个麻烦。
</p>

<p>
经过一段时间的摸索，我感觉自己还是比较喜欢在本地编辑然后同步代码编译这种方式，这个过程可以自动化。另外很重要的一点需求是，它需要能够像 <code>M-x compile</code> 那样在 Emacs 中很方便地使用 <code>M-x next-error</code> and <code>M-x previous-error</code> 来自动定位编译有问题的代码行，这样不仅提高修复编译错误的效率，还能保护视力。
</p>

<p>
按照上述思路我最终写了这样一个小插件 <a href="https://github.com/whatacold/ppcompile">ppcompile</a> ， pp 二字代表 ping-pong ，表示每次编译就像打乒乓球一样。本地先发球，利用 rsync 把代码同步到远端，远端编译之后回球，然后本地再转换 <code>*compilation*</code> buffer 中远端的路径，这样 Emacs 就能够正确地识别编译错误，从而帮助我直接打开对应的错误文件及行数。
</p>

<p>
使用方式上，只需要把 <code>ppcompile.el</code> 拷贝到 load-path 中进行加载，然后设置一些选项即可。具体可以参考项目 README 。当前提供以下几个命令：
</p>
<ol class="org-ol">
<li><code>ppcompile-ping</code> 仅同步代码到远端</li>
<li><code>ppcompile-pong</code> 仅在远端编译</li>
<li><p>
<code>ppcompile</code> 同步代码以及编译，即一次 ping-pong 往返。
</p>

<p>
这个命令和 <code>ppcompile-pong</code> 命令在使用上同时考虑了 compile 命令的使用习惯，会遵循你的 <code>compilation-read-command</code> 设置决定是否编译时弹窗让你选择编译命令。
</p></li>

<li><code>ppcompile-config-project</code> 配置项目配置到根目录的 <code>.dir-locals.el</code> 中，主要是为了方便有很多项目时的个性化定制需求，否则直接配置全局的就可以了。</li>

<li><code>ppcompile-toggle-debug</code> 调试开关命令，在开启的情况下会把当前执行的命令行打印到 <code>*Message*</code> 中。</li>
</ol>

<p>
目前，我自己使用 ppcompile 已经没有什么问题了，它在最近的项目开发中帮我节省了不少精力，欢迎大家试用和使用 :)
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">emacs</a> <a href="tag-zhongwen.html">zhongwen</a> </div>]]></description>
  <category>emacs</category>
  <category>zhongwen</category>
  <link>https://whatacold.github.io/2020-04-11-use-ppcompile-to-remote-compile-in-emacs-zh.html</link>
  <pubDate>Sat, 11 Apr 2020 22:17:00 +0800</pubDate>
</item>
<item>
  <title>ppcompile: An Emacs Package to Help Stay Coding Locally</title>
  <description><![CDATA[
<p>
If you are a C/C++ programmer like me, you may experience jumping around different machines to write and compile your code, or you may write code on different machines for different projects, and scp/rsync/ftp the projects around. It works, but it's a bit tedious and takes too much burden on our brains.
</p>

<p>
For example, say I have two projects that should be compiled on their compiling machines respectively. There are two obvious workflows for writing code for them "simultaneously":
</p>

<ol class="org-ol">
<li><p>
Write code locally, rsync files to their compiling machine and compile them, fix errors according to the compiling result.
</p>

<p>
Pros: I have only one coding environment to maintain, and I have full control of it. Install packages? Start some services? No problem, just a few commands.
</p>

<p>
Cons: I have to sync the source code, spot the errors by my eyes and fix them accordingly.
</p></li>

<li><p>
Write code on the compiling machine, compile them and fix errors locally there, taking the advantage of <code>M-x next-error</code>.
</p>

<p>
Pros: <code>M-x next-error</code> works like a charm to fix errors, just a piece of cake. Eye friendly.
</p>

<p>
Cons: Several Emacs environment to maintain, and I don't always have the root privilege.
</p>

<p>
Update: Tramp is a built-in package for editing remote files, which also falls into this category, although it's quite handy to edit single files like confs, at least for me.
</p></li>
</ol>

<p>
(Update: There is another option using <a href="https://github.com/libfuse/sshfs">sshfs</a>, which mounts the remote FS, it's a general and nice solution if you have a stable network.)
</p>

<p>
So I was wondering if there is a way to take the good part of both approaches so that I have the full privilege and fix compiling errors locally as if I were compiling locally? Well, the answer was yes, and <a href="https://github.com/whatacold/ppcompile">ppcompile</a> was my solution for it.
</p>

<p>
<code>ppcompile</code> stands for ping-pong compile, as it works like playing ping-pong. First, it rsync's the files to the compiling machines ("ping"). Second, it gets the result back ("pong") and gets them fixed locally.
</p>

<p>
It works now, and I hope it helps you too. :)</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">Emacs</a> </div>]]></description>
  <category>Emacs</category>
  <link>https://whatacold.github.io/2020-03-07-ppcompile:-an-emacs-package-to-help-stay-coding-locally.html</link>
  <pubDate>Sat, 07 Mar 2020 23:50:00 +0800</pubDate>
</item>
<item>
  <title>The binary search algorithm is also an efficient strategy for narrowing down problem space</title>
  <description><![CDATA[
<p>
<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">Binary search algorithm</a> is a search algorithm that finds the position of a target value within a sorted array. It cuts off the target array in half in a pass, so that it has a worst-case performance of <code>O(log n)</code>.
</p>


<figure>
<object type="image/svg+xml" data="https://upload.wikimedia.org/wikipedia/commons/8/83/Binary_Search_Depiction.svg" class="org-svg">
Sorry, your browser does not support SVG.</object>

<figcaption><span class="figure-number">Figure 1: </span>Visualization of the binary search algorithm where 7 is the target value(@wikipedia)</figcaption>
</figure>

<p>
We all know that it's an efficient searching algorithm, but the strategy behind it also applies for narrowing down other problem space, for example, finding out when a bug is first introduced in a series of git commits.
</p>

<p>
Let's say I have a git repo of 8 commits, the first 5 of which are good, but then the 6th commit introduces a bug, so I have a git commit history looks like below:
</p>
<pre class="example">
 |g|g|g|g|g|b|b|b|
---------------------&gt; the git commit history
</pre>

<p>
So I know that the first commit is good and the last (8th) commit is bad (these are initial problem space), by leveraging the strategy of binary search, it can quickly find out that the 6th commit is the first bad commit. (Check the 4th element first, then the 6th.)
</p>

<p>
Well, that's basically how <code>git bisect</code> works, and it's more powerful, it can be run with a script to determine if current commit is good or not, saving time to verify it manually.
</p>

<p>
Recently, I managed to use <code>git bisect</code> to find out a recession bug <a href="https://github.com/qtile/qtile/issues/1410">(#1410)</a> of qtile, which reports that <code>qtile-cmd</code> doesn't work anymore which the HEAD commit (<code>0617235c</code>), but it works with tag <code>v0.14.2</code>.
</p>

<p>
With those in mind, here are the steps to catch the first bad commit:
</p>
<ol class="org-ol">
<li><p>
Start the bisect session: <code>git bisect start 0617235c v0.14.2</code>
</p>

<pre class="example">
$ git bisect start 0617235c v0.14.2
Bisecting: 88 revisions left to test after this (roughly 7 steps)
[082e4c7248ac40b69dbe94cfdc4de6aecc5f74ba] Fix debian version
</pre></li>

<li><p>
Make a judge script(attached at the end) and find out the commit by running <code>git bisect run ./scripts/git-bisect-judge</code>
</p>

<p>
It only takes git 6 steps to find the first broken commit, the output is following with qtile logs being removed:
</p>
<pre class="example">
$ git bisect run ./scripts/git-bisect-judge
running ./scripts/git-bisect-judge
Bisecting: 44 revisions left to test after this (roughly 6 steps)
[fdb3a324aadb0f934080a703d6835a9a7d203720] Delay power renormalization
running ./scripts/git-bisect-judge
...

Bisecting: 21 revisions left to test after this (roughly 5 steps)
[0262fbc2ca23d27fa33c4903d7e8a9b8c14d42eb] Move around modules
running ./scripts/git-bisect-judge
...

Bisecting: 10 revisions left to test after this (roughly 4 steps)
[a3ae3c623859b247813fc1876b188c4d40e84df0] Move calls out of the command graph
running ./scripts/git-bisect-judge
...

Bisecting: 5 revisions left to test after this (roughly 3 steps)
[036dbcb1b7c5c0fff00fbfbb9688597e2d2f188c] Add tests to the command graph
running ./scripts/git-bisect-judge
...

Bisecting: 2 revisions left to test after this (roughly 1 step)
[9c3c78ca66905b4e11bfd7a155cfe883cbe12ad6] Create new command graph
running ./scripts/git-bisect-judge
...

Bisecting: 0 revisions left to test after this (roughly 0 steps)
[ed5eefbf3482481c1f0f4c1cb2eb79e571fec835] Use correct type annotations in IPC module
running ./scripts/git-bisect-judge
...

ed5eefbf3482481c1f0f4c1cb2eb79e571fec835 is the first bad commit
commit ed5eefbf3482481c1f0f4c1cb2eb79e571fec835
Author: Sean Vig &lt;sean.v.775@gmail.com&gt;
Date:   Wed Jun 19 22:33:45 2019 -0400

    Use correct type annotations in IPC module

    With python/typeshed#3061 making it into the most recent release of
    mypy, remove the hacks on the type annotations around the marshal
    module.

:040000 040000 d21cc05b503a0f4658647adad3169efbd84eaa16 f80f29304abd86da9299dfaf22f6719698a37e63 M	libqtile
bisect run success
</pre></li>

<li>End the session by running <code>git bisect reset</code>, git will restores your previouse HEAD commit.</li>
</ol>

<p>
The judge script <code>git-bisect-judege</code> is below:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #95a5a6; font-style: italic;">#</span><span style="color: #95a5a6; font-style: italic;">!/bin/</span><span style="color: #2c3e50; font-style: italic;">sh</span>

<span style="color: #3498db;">HERE</span>=$(dirname $(readlink -f $<span style="color: #3498db;">0</span>))
<span style="color: #3498db;">SCREEN_SIZE</span>=${<span style="color: #3498db;">SCREEN_SIZE</span>:-1000x800}
<span style="color: #3498db;">XDISPLAY</span>=${<span style="color: #3498db;">XDISPLAY</span>:-:1}
<span style="color: #3498db;">LOG_LEVEL</span>=${<span style="color: #3498db;">LOG_LEVEL</span>:-DEBUG}
<span style="color: #3498db;">LOG_LEVEL</span>=INFO
<span style="color: #2c3e50; font-style: italic;">if</span> [[ -z $<span style="color: #3498db;">PYTHON</span> ]]; <span style="color: #2c3e50; font-style: italic;">then</span>
    <span style="color: #3498db;">PYTHON</span>=python
<span style="color: #2c3e50; font-style: italic;">fi</span>

./scripts/ffibuild

<span style="color: #3498db;">CLIENT</span>=<span style="color: #16a085;">"urxvt"</span>

Xephyr +extension RANDR -screen ${<span style="color: #3498db;">SCREEN_SIZE</span>} ${<span style="color: #3498db;">XDISPLAY</span>} -ac &amp;
<span style="color: #3498db;">XEPHYR_PID</span>=$<span style="color: #3498db;">!</span>
sleep 0.5
<span style="color: #2c3e50;">source</span> ~/workspace/virtualenv/qtile-devel/bin/activate
env <span style="color: #3498db;">DISPLAY</span>=${<span style="color: #3498db;">XDISPLAY</span>} ${<span style="color: #3498db;">PYTHON</span>} <span style="color: #16a085;">"${HERE}"</span>/../bin/qtile -l ${<span style="color: #3498db;">LOG_LEVEL</span>} $<span style="color: #3498db;">@</span> &amp;
<span style="color: #3498db;">QTILE_PID</span>=$<span style="color: #3498db;">!</span>

<span style="color: #2c3e50;">export</span> <span style="color: #3498db;">DISPLAY</span>=${<span style="color: #3498db;">XDISPLAY</span>}
<span style="color: #2c3e50;">cd</span> ~/workspace/python/qtile
sleep 0.5
./bin/qtile-cmd -o screen -f info
<span style="color: #3498db;">EXIT_CODE</span>=$<span style="color: #3498db;">?</span>

<span style="color: #2c3e50;">kill</span> -9 $<span style="color: #3498db;">QTILE_PID</span>
<span style="color: #2c3e50;">kill</span> $<span style="color: #3498db;">XEPHYR_PID</span>

<span style="color: #2c3e50; font-style: italic;">exit</span> $<span style="color: #3498db;">EXIT_CODE</span>
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-git.html">Git</a> <a href="tag-troubleshooting.html">troubleshooting</a> </div>]]></description>
  <category>Git</category>
  <category>troubleshooting</category>
  <link>https://whatacold.github.io/2020-02-04-binary-search-algorithm-is-also-an-efficient-strategy-for-narrowing-down-problem-space.html</link>
  <pubDate>Tue, 04 Feb 2020 18:48:00 +0800</pubDate>
</item>
<item>
  <title>Manage SSH connections with =~/.ssh/config=</title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orga76777e">1. How To Configure Connections</a></li>
<li><a href="#org40b3676">2. How To Use Identity Files</a></li>
<li><a href="#orgde14cc3">3. Common Configurations</a></li>
</ul>
</div>
</nav>
<p>
I used to manage SSH connection with such GUI apps as MobaXterm, when I wrote code on Windows at work. As I changed my workflow to use a tiling window manager in a VirtualBox guest OS, I continued to improve my way of managing SSH connections, which I want to share here if you don't know yet.
</p>

<p>
At first, I baked a helper Python script, which I named as qssh for "quick ssh", to help me assemble ssh arguments for me(such as username, Ip, port, etc.), so that I can easily access a host by giving it only one argument, e.g. <code>qssh foo</code>.
</p>

<p>
Then as I understood it more, I surprisingly found that <code>ssh</code> itself can be configured to do that by just configuring <code>~/.ssh/config</code>. I wish I knew it from day one. Together with identity files, it's very easy to login remote host, copy files between hosts using <code>scp</code>.
</p>

<div id="outline-container-orga76777e" class="outline-2">
<h2 id="orga76777e"><span class="section-number-2">1</span> How To Configure Connections</h2>
<div class="outline-text-2" id="text-1">
<p>
For every SSH connection, there are some specific arguments like IP, port, user name, etc. Let's assume there is a host with IP <code>10.1.2.3</code>, and I can ssh into it with <code>whatacold</code> as name and <code>foo123</code> as the password at port 2234. I had to type <code>ssh -p 2234 whatacold@10.1.2.3</code> literally, which is too many keys to type.
</p>

<p>
Actually, all these connection details can be put in <code>~/.ssh/config</code> like below, it's organized in sections per hosts:
</p>

<div class="org-src-container">
<pre class="src src-conf">Host new-test
     Hostname 10.1.2.3
     Port 2234
     User whatacold
     IdentityFile ~/.ssh/id_dev
</pre>
</div>

<p>
Now I can do things straightly in a higher level:
</p>
<ol class="org-ol">
<li><code>ssh new-test</code>, log in that host</li>
<li><code>ssh new-test date</code>, log in it and run a command there</li>
<li><code>scp /tmp/a.log new-test:/tmp</code>, copy a file to it</li>
<li><code>rsync -e ssh /tmp/foo /tmp/</code>, even let <code>rsync</code> sync files over SSH</li>
</ol>

<p>
There is one that hasn't be mentioned is <code>IdentityFile</code>, which means I can log in that host using public key authentication, so that I don't have to type a password when logging in the host anymore, which really smooths the workflow.
</p>
</div>
</div>

<div id="outline-container-org40b3676" class="outline-2">
<h2 id="org40b3676"><span class="section-number-2">2</span> How To Use Identity Files</h2>
<div class="outline-text-2" id="text-2">
<p>
First, generate a pair of keys if you haven't done yet, for example, <code>ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_dev</code>, hit Enter when it prompts you to enter a password(using no password).
</p>

<p>
Then copy the public key to the remote host by executing <code>ssh-copy-id -i ~/.ssh/id_dev new-test</code>, it will append the key to <code>~/.ssh/authorized_keys</code> file there.
</p>

<p>
Now you can log in that host without entering passwords, try it with, for example, <code>ssh new-test ifconfig</code> to see if it prints the remote host's IP.
</p>

<p>
(I still remember that I used to write a helper <code>expect</code> script to save me from typing passwords every time, it worked but it's not as simple and convenient as <code>~/.ssh/config</code>.)
</p>
</div>
</div>

<div id="outline-container-orgde14cc3" class="outline-2">
<h2 id="orgde14cc3"><span class="section-number-2">3</span> Common Configurations</h2>
<div class="outline-text-2" id="text-3">
<p>
If there are some common configurations for every host, they can be put under a default "section" named <code>Host *</code>. For example, I want to keep alive the connections, so I have these directives for all hosts:
</p>

<div class="org-src-container">
<pre class="src src-conf"><span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">Default settings for all hosts</span>
Host *
    ServerAliveInterval 10
    ServerAliveCountMax 100
</pre>
</div>

<p>
Note that this default setting should be put at the end of the file, as it seems that the first matched directive of two <code>Host</code> wins if .</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-tools.html">Tools</a> <a href="tag-tiling-wm.html">tiling-wm</a> </div>]]></description>
  <category>Tools</category>
  <category>tiling-wm</category>
  <link>https://whatacold.github.io/2019-12-22-manage-ssh-connections-with-ssh-config.html</link>
  <pubDate>Sun, 22 Dec 2019 18:52:00 +0800</pubDate>
</item>
<item>
  <title>Why can't Git fetch remote branches other than master?</title>
  <description><![CDATA[
<p>
Last week I came into a problem with Git, that I can't fetch the remote branch that I pushed to. It was so weird because I can push the local branch there. It never happens before, and it happened when I was in a rush to rebase my code, as someone in my team pushed his code.
</p>

<p>
After searching, it seemed that the configuration of <code>fetch</code> of that repo was different(this <a href="https://stackoverflow.com/questions/11623862/fetch-in-git-doesnt-get-all-branches">Stack Overflow</a> thread for example) than before, it was specified that only <code>master</code> can be fetched. It worked after I changed it to <code>+refs/heads/*:refs/remotes/origin/*</code>.
</p>

<p>
I reflected why it happened after work, the only difference I can remember was that I clone that repo with the option <code>--depth &lt;N&gt;</code>, that is, it was a shallow clone to save disk space.
</p>

<p>
Today I had some time at hand, and I confirmed that the option is the problem by reading the git-clone(1) manpage, it notes that:
</p>
<pre class="example">
--depth &lt;depth&gt;
    Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless
    --no-single-branch is given to fetch the histories near the tips of all branches.
</pre>

<p>
Let's demonstrate it by cloning my dotfiles repo with different options, and it shows clearly that Git will only fetch <code>master</code> of the remote repo if only specifying <code>--depth</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell">$ cd /tmp/
$ git clone --depth 1 https://github.com/whatacold/dotfiles.git dotfiles-depth1
$ git clone --no-single-branch --depth 1 https://github.com/whatacold/dotfiles.git dotfiles-no-single-branch
$ git clone https://github.com/whatacold/dotfiles.git dotfiles-full

$ grep <span style="color: #16a085;">'remote "origin"'</span> -A 2 dotfiles-depth1/.git/config 
[remote <span style="color: #16a085;">"origin"</span>]
    <span style="color: #3498db;">url</span> = https://github.com/whatacold/dotfiles.git
    <span style="color: #3498db;">fetch</span> = +refs/heads/master:refs/remotes/origin/master

$ grep <span style="color: #16a085;">'remote "origin"'</span> -A 2 dotfiles-no-single-branch/.git/config 
[remote <span style="color: #16a085;">"origin"</span>]
    <span style="color: #3498db;">url</span> = https://github.com/whatacold/dotfiles.git
    <span style="color: #3498db;">fetch</span> = +refs/heads/*:refs/remotes/origin/*

$ grep <span style="color: #16a085;">'remote "origin"'</span> -A 2 dotfiles-full/.git/config
[remote <span style="color: #16a085;">"origin"</span>]
    <span style="color: #3498db;">url</span> = https://github.com/whatacold/dotfiles.git
    <span style="color: #3498db;">fetch</span> = +refs/heads/*:refs/remotes/origin/*
</pre>
</div>

<p>
I don't know why <code>--single-branch</code> should be implied by default, at least for me, I just want to fetch all the remote branches.
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-git.html">Git</a> </div>]]></description>
  <category>Git</category>
  <link>https://whatacold.github.io/2019-12-01-why-can't-git-fetch-remote-branches-other-than-master.html</link>
  <pubDate>Sun, 01 Dec 2019 16:00:00 +0800</pubDate>
</item>
<item>
  <title>Start a new terminal(urxvt) at current buffer's default-directory on Emacs</title>
  <description><![CDATA[
<p>
I have been really enjoying the more concentration workflow qtile, a tiling window manager, brings me, since I started using it a few months ago. I am more focus on the current task now as all the windows I care about are laid out on the same screen.
</p>

<p>
As I get more used to qtile at every day's work, I noticed that I became more depend on short-life terminal sessions. Sometimes I need to quickly execute some commands on the current buffer on Emacs, such as searching text which having many matches and quit that terminal after I'm done. So I wondered what could be the best way to achieve that.
</p>

<p>
At first, I think maybe I can bind some keys to qtile, which triggers a handler in Python to get the current directory of the current window, and then open a new terminal based on that directory. The problem is how to get the current directory of any window, so I suspend as there isn't a good way to do that.
</p>

<p>
A few days later, I realized that I can just open a terminal from inside Emacs, where it's easy to get the current working directory with <code>default-directory</code>. (The idea was inspired by @ztlevi on Emacs China.) And then I found that I don't really have to open a terminal from any windows, but just from Emacs.
</p>

<p>
With that idea, it didn't take much time to write a command to do that, which I name as <code>urxvt</code>:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #2c3e50; font-style: italic;">defun</span> <span style="color: #9b59b6;">urxvt</span> ()
  <span style="color: #16a085;">"Spawn a urxvt instance based on `</span><span style="color: #7f8c8d; font-style: italic;">default-directory</span><span style="color: #16a085;">' of current buffer."</span>
  (<span style="color: #2c3e50; font-style: italic;">interactive</span>)
  (<span style="color: #2c3e50; font-style: italic;">let</span> ((urxvt <span style="color: #16a085;">"urxvt256c-ml"</span>))
    (start-process urxvt nil urxvt <span style="color: #16a085;">"-cd"</span> (expand-file-name <span style="color: #16a085;">"./"</span>))))
</pre>
</div>

<p>
Sometimes it's important to first clear your mind to figure out what exactly you want.
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-tiling-wm.html">tiling-wm</a> <a href="tag-urxvt.html">urxvt</a> </div>]]></description>
  <category>tiling-wm</category>
  <category>urxvt</category>
  <link>https://whatacold.github.io/2019-11-25-start-a-new-terminal(urxvt)-at-current-buffer's-default-directory-on-emacs.html</link>
  <pubDate>Mon, 25 Nov 2019 22:47:00 +0800</pubDate>
</item>
<item>
  <title>Build Docker Images for Qtile</title>
  <description><![CDATA[
<p>
One of Docker's use cases is to set up identical development environments easily and quickly for a dev team.
Recently, I had an opportunity to give it a try, and build Docker images for <a href="https://github.com/qtile/qtile">Qtile</a>, as it didn't have one yet as I get involved. With the images, it's easy to set up the environment to easily run the tests, and build the documentation.
</p>

<p>
The best way to have a basic idea of Docker is to think it like a chroot environment, as Chris Tankersley stated in his <a href="https://leanpub.com/dockerfordevs">Docker for Developers</a>.
And two basic concepts of Docker are image and container, containers to images are what objects to classes as in OOP terminology.
</p>

<p>
The instructions for building a Docker image are put in a <code>Dockerfile</code>, every command builds a new layer on top of the previous one so that I can build my image "on the shoulders of giants".
</p>

<p>
The final Dockerfiles for testing Qtile and building its documentation are hosted at <a href="https://github.com/whatacold/qtile-docker">https://github.com/whatacold/qtile-docker</a>, there is a brief README there about how to build them and use them.</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-docker.html">Docker</a> </div>]]></description>
  <category>Docker</category>
  <link>https://whatacold.github.io/2019-10-07-build-docker-images-for-qtile.html</link>
  <pubDate>Mon, 07 Oct 2019 13:25:00 +0800</pubDate>
</item>
<item>
  <title>用 Python Requests “一键”重启天翼路由器</title>
  <description><![CDATA[
<p>
不知道什么原因，我的网络有时候会很慢，而通过重启天翼网关路由器（版本 V1.0 ）大概率能够恢复。这样重启的次数多了之后会觉得有点繁琐，本着偷懒的原则，就想写一个脚本来自动重启，那样的话会“方便”很多。
</p>

<p>
经过一番折腾，查看其控制台的网页代码，最后终于搞定。通过使用 <a href="https://requests.kennethreitz.org/en/master/">Python Requests</a> 库串联登录及重启两个步骤，达到“一键”自动重启路由器的目的。 Python 脚本如下：
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #95a5a6; font-style: italic;">#</span><span style="color: #95a5a6; font-style: italic;">!/usr/bin/env python3</span>
<span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">-*- coding: utf-8 -*-</span>

<span style="color: #2c3e50; font-style: italic;">import</span> requests
<span style="color: #2c3e50; font-style: italic;">import</span> re

<span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">&#36825;&#37324;&#30340;&#37197;&#32622;&#65292;&#35831;&#25353;&#38656;&#20462;&#25913;&#12290;</span>
<span style="color: #3498db;">DEVICE_IP</span>=<span style="color: #16a085;">"192.168.1.1"</span>
<span style="color: #3498db;">USERNAME</span>=<span style="color: #16a085;">'admin'</span>
<span style="color: #3498db;">PASSWORD</span>=<span style="color: #16a085;">'foobar'</span>

<span style="color: #2c3e50; font-style: italic;">def</span> <span style="color: #9b59b6;">reboot</span>():
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #16a085;">'''Reboot the Tianyi Gateway automatically'''</span>
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">s</span> = requests.Session()
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">login_data</span> = <span style="color: #16a085;">"username={}&amp;password={}"</span>.<span style="color: #2c3e50;">format</span>(USERNAME, PASSWORD)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">response</span> = s.post(<span style="color: #16a085;">"http://{}/login.cgi"</span>.<span style="color: #2c3e50;">format</span>(DEVICE_IP), login_data)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">response_html</span> = response.text
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">matches</span> = re.findall(<span style="color: #16a085;">'var mysessionid=([0-9]+);'</span>, response_html)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">if</span> 1 != <span style="color: #2c3e50;">len</span>(matches):
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">raise</span> <span style="color: #16a085;">"No session id matched!"</span>

<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">session_id</span> = matches[0]
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">session_id = 1111 # It doesn't care what it REALLY is</span>
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">response</span> = s.post(<span style="color: #16a085;">"http://{}/restartGateWay.json?sessionKey={}"</span>.<span style="color: #2c3e50;">format</span>(DEVICE_IP,
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>  session_id),
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span> <span style="color: #16a085;">"action=restartGateWay&amp;actionid=8"</span>)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">text</span> = response.text <span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">{ "status": "success", "actionid": "8" }</span>
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">return_object</span> = response.json()
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">if</span> <span style="color: #16a085;">"success"</span> == return_object[<span style="color: #16a085;">"status"</span>]:
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">print</span>(<span style="color: #16a085;">"Device rebooted successfully, wait a minute!"</span>)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">else</span>:
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">print</span>(<span style="color: #16a085;">"Failed to reboot the device, return json: {}"</span>.<span style="color: #2c3e50;">format</span>(text))

<span style="color: #2c3e50; font-style: italic;">if</span> <span style="color: #2c3e50;">__name__</span> == <span style="color: #16a085;">'__main__'</span>:
<span style="background-color: #ecf0f1;"> </span>   reboot()
</pre>
</div>

<p>
此脚本依赖 Python Requests 库，可以通过 <code>pip</code> 来安装；我使用 Python3 ，不过 Python2 应该也不会有太大问题。
把上述脚本保存到文件中，比如 <code>~/bin/reboot-tianyi-gateway</code> ，并且增加可执行权限（ <code>chmod +x ~/bin/reboot-tianyi-gateway</code> ），在需要的时候在终端中执行 <code>~/bin/reboot-tianyi-gateway</code> 即可。 :)
</p>

<p>
另外，正如注释中提到的，其实 <code>/restartGateWay.json</code> 这个是一个裸接口，并没有校验 <code>sessionKey</code> 的有效性；甚至登录接口在用户登录之后也不会设置 cookie ，所有的业务接口都是可以直接调用的，也就是说，登录界面只是一个摆设。 :(
</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-python.html">Python</a> </div>]]></description>
  <category>Python</category>
  <link>https://whatacold.github.io/2019-10-01-reboot-tianyi-router-using-python-requests.html</link>
  <pubDate>Tue, 01 Oct 2019 22:28:00 +0800</pubDate>
</item>
<item>
  <title>How to run the bleeding-edge code of Qtile within a virtualenv</title>
  <description><![CDATA[
<p>
For having been using GNOME for quite a long time, I was considering trying some tiling window managers to see what it's like a few weeks ago. Along the way, I found a nice window manager written in Python: <a href="http://www.qtile.org">Qtile</a>, what interests me most is that it's a <b>hackable</b> window manager, which makes it flexible to extend or change its behaviors.
</p>

<p>
Well, switching to use a tiling window manager is far simpler than I thought. There are two ways to have it:
</p>
<ol class="org-ol">
<li>Installing it via the system's package manager, e.g. <code>dnf</code> for Fedora</li>
<li>Installing it from the source code repo.</li>
</ol>

<p>
If you just want to give it a try, you can just install it via a package manager, logout the current X session, and re-login with Qtile as your window manager (there are options when you log in), and you're done. It's that simple.
</p>

<p>
As Qtile is still under development, I would like to run the bleeding-edge source code to catch up with Qtile.
</p>

<p>
As in the <a href="http://docs.qtile.org/en/latest/manual/install/index.html#qtile">docs</a> , it's quite straight-forward to install it.
</p>

<div class="org-src-container">
<pre class="src src-shell">git clone git://github.com/qtile/qtile.git
<span style="color: #2c3e50;">cd</span> qtile
pip3 install .
</pre>
</div>

<p>
But it will pollute the environment, so I'd rather contain it within a virtualenv, here are the steps how to run it within a dedicated virtualenv for user <code>foo</code> on Fedora.
</p>

<ol class="org-ol">
<li><p>
Clone the repo
</p>

<div class="org-src-container">
<pre class="src src-shell">mkdir -p ~/local/
git clone https://github.com/qtile/qtile.git
</pre>
</div></li>

<li><p>
Create a new virtualenv, and install dependencies there
</p>

<div class="org-src-container">
<pre class="src src-shell">python3 -m venv ~/local/qtile/qtile-env/
<span style="color: #2c3e50;">source</span> ~/local/qtile/qtile-env/bin/activate

<span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">Install dependencies</span>
pip install xcffib
pip install --no-cache-dir cairocffi
</pre>
</div></li>

<li><p>
Make a glue shell script to use the virtualenv
</p>

<div class="org-src-container">
<pre class="src src-shell">cat &gt; /home/foo/local/qtile/qtile-venv-entry &lt;&lt;EOF
<span style="color: #16a085;">#!/bin/bash</span>

<span style="color: #16a085;"># This glue shell is only needed when you want to</span>
<span style="color: #16a085;"># run Qtile within a virtualenv</span>

<span style="color: #16a085;">source ~/local/qtile/qtile-env/bin/activate</span>
<span style="color: #16a085;">python ~/local/qtile/bin/qtile $*</span>
<span style="color: #16a085;">EOF</span>
</pre>
</div>

<p>
Also, make sure to make it executable, that is, <code>chmod +x /home/foo/local/qtile/qtile-venv-entry</code>
</p></li>

<li><p>
Make a entry desktop file for the display manager
</p>

<div class="org-src-container">
<pre class="src src-shell">cat &gt; /usr/share/xsessions/qtile-venv.desktop &lt;&lt;EOF
<span style="color: #16a085;">[Desktop Entry]</span>
<span style="color: #16a085;">Name=Qtile(venv)</span>
<span style="color: #16a085;">Comment=Qtile Session Within Venv</span>
<span style="color: #16a085;">Exec=/home/foo/local/qtile/qtile-venv-entry</span>
<span style="color: #16a085;">Type=Application</span>
<span style="color: #16a085;">Keywords=wm;tiling</span>
<span style="color: #16a085;">EOF</span>
</pre>
</div>

<p>
Pay attention to the <code>Exec</code> directive, it points to the glue script.
</p></li>

<li>Log out or reboot your system, then select “Qtile(venv)” as your window manager by clicking the setting icon when logging in.</li>
</ol>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-python.html">Python</a> <a href="tag-tiling-wm.html">tiling-wm</a> </div>]]></description>
  <category>Python</category>
  <category>tiling-wm</category>
  <link>https://whatacold.github.io/2019-09-29-how-to-run-the-bleeding-edge-code-of-qtile-within-virtualenv.html</link>
  <pubDate>Sun, 29 Sep 2019 17:05:00 +0800</pubDate>
</item>
<item>
  <title>How to revert a series of commits with Git?</title>
  <description><![CDATA[
<p>
Sometimes, I need to revert a series of commits that are already pushed, doing a git hard reset is not an option, as someone may already have new commits based on mine.
</p>

<p>
For example, assume that I've made a few commits like below:
</p>

<pre class="example">
65a2c62 * commit 10
25cad43 * commit 9
72ad583 * commit 8
ceebf9a * commit 7
acf8a11 * commit 6
28d526f * commit 5
63af1e2 * commit 4
982c71c * commit 3
0fb4c2d * commit 2
acf9da1 * commit 1
b5f9933 * commit 0
</pre>

<p>
Now for whatever reason, I need to "drop" the changes made by commit 6 to commit 10, that is, go back to commit 5 without deleting commit.
</p>

<p>
How to do that?
</p>

<p>
One way is to use <code>git revert 28d526f..HEAD</code> to reversely revert the commits, which results in below commit history:
</p>

<pre class="example">
66808e5 * Revert "commit 6"
2661e48 * Revert "commit 7"
db86ec6 * Revert "commit 8"
fde9cb5 * Revert "commit 9"
3bf102f * Revert "commit 10"
65a2c62 * commit 10
25cad43 * commit 9
72ad583 * commit 8
ceebf9a * commit 7
acf8a11 * commit 6
28d526f * commit 5
63af1e2 * commit 4
982c71c * commit 3
0fb4c2d * commit 2
acf9da1 * commit 1
</pre>

<p>
It works, but it makes too many commits, in many cases that's not what I want, I'd rather make only one commit.
</p>

<p>
So is there a better way? The other day, I found the soft reset can suite my needs.
</p>

<p>
But how is it possible? Generally, <code>git reset</code> is used to move HEAD around the commits and/or to reset the index and working tree. The magic is that a soft reset can reset HEAD to a specific commit but leave the index and working tree untouched, so if I soft-reset HEAD from "commit 5" to "commit 10", it will move HEAD directly to "commit 10", but let the index as is, so that the index has the diff from "commit 10" to "commit 5" at the same time (<a href="https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/">Difference between git reset soft, mixed and hard - davidzych.com</a> illustrates different kinds of reset in detail.)
</p>

<p>
Here are the steps:
</p>
<div class="org-src-container">
<pre class="src src-shell">git branch master-bak    <span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">create a backup branch in case commits lost</span>
git reset --hard 28d526f <span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">the commit 5</span>
git reset --soft master-bak
git commit -m <span style="color: #16a085;">"Revert the commits [6,10]"</span>
git diff 28d526f..HEAD   <span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">confirm that it doesn't have any diffs</span>
</pre>
</div>

<p>
P.S. It's a bit boring to prepare git commits above, so I bake a helper script to do that:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #95a5a6; font-style: italic;">#</span><span style="color: #95a5a6; font-style: italic;">!/bin/</span><span style="color: #2c3e50; font-style: italic;">bash</span>

<span style="color: #3498db;">COUNT</span>=0
<span style="color: #3498db;">REPO</span>=<span style="color: #16a085;">""</span>
<span style="color: #2c3e50; font-style: italic;">if</span> [ $<span style="color: #3498db;">#</span> -ne 2 ]
<span style="color: #2c3e50; font-style: italic;">then</span>
    <span style="color: #2c3e50;">echo</span> <span style="color: #16a085;">"Usage: $0 &lt;REPO-DIR&gt; &lt;COUNT&gt;"</span>
    <span style="color: #2c3e50; font-style: italic;">exit</span> 1
<span style="color: #2c3e50; font-style: italic;">fi</span>
<span style="color: #3498db;">REPO</span>=$<span style="color: #3498db;">1</span>
<span style="color: #3498db;">COUNT</span>=$<span style="color: #3498db;">2</span>

<span style="color: #2c3e50;">echo</span> <span style="color: #16a085;">"Creating the repo and cd'ing into it..."</span>
mkdir -p $<span style="color: #3498db;">REPO</span> &amp;&amp; <span style="color: #2c3e50;">cd</span> $<span style="color: #3498db;">REPO</span>
[ ! -d .git/ ] &amp;&amp; git init .

<span style="color: #2c3e50;">echo</span> <span style="color: #16a085;">"Making commits..."</span>
<span style="color: #2c3e50; font-style: italic;">for</span> i<span style="color: #2c3e50; font-style: italic;"> in</span> <span style="color: #ff00ff;">`seq 0 $COUNT`</span>;
<span style="color: #2c3e50; font-style: italic;">do</span>
    <span style="color: #2c3e50;">echo</span> <span style="color: #16a085;">"modification made by commit $i"</span> &gt;&gt; demo.txt
    git add demo.txt
    git commit -m <span style="color: #16a085;">"commit $i"</span>
<span style="color: #2c3e50; font-style: italic;">done</span>
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-git.html">Git</a> </div>]]></description>
  <category>Git</category>
  <link>https://whatacold.github.io/2019-09-24-how-to-revert-a-series-of-commits-with-git.html</link>
  <pubDate>Tue, 24 Sep 2019 23:14:00 +0800</pubDate>
</item>
<item>
  <title>How to rename web page titles in a lightweight way</title>
  <description><![CDATA[
<p>
There are times that I need to open many web pages of some specific websites within a browser, there are so many tabs that I can't efficiently access one of them, as their favicons are all the same.
</p>

<p>
So I tried to find a way to rename their titles, preferably in a lightweight way, so that I can spot them quickly with my eyes.
</p>

<p>
The first thought came into my mind was to find some extensions to do the job. It was easy to install one with no time. But I was not very happy with the experience. It seems that it keeps the rule of renaming titles based on the URL so that the title will always be renamed if I refreshing it, which is not what I want. I'd rather want to do it in an ad-hoc way.
</p>

<p>
Then I thought maybe it can be simply done with a bookmarklet, nevertheless, it's just a simple JavaScript statement of <code>document.title = "nice-title"</code>. With that in my mind, it didn't take me much time to write this bookmarklet:
</p>
<div class="org-src-container">
<pre class="src src-js">javascript:
(<span style="color: #2c3e50; font-style: italic;">function</span> ()
 {
     <span style="color: #2c3e50; font-style: italic;">var</span> <span style="color: #3498db;">title</span> = window.prompt(<span style="color: #16a085;">"Enter new title: "</span>, <span style="color: #16a085;">""</span>);
     <span style="color: #2c3e50; font-style: italic;">if</span> (title)
     {
         document.title= title;
     }
 })()
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-tools.html">Tools</a> </div>]]></description>
  <category>Tools</category>
  <link>https://whatacold.github.io/2019-08-18-how-to-rename-web-page-titles-in-a-lightweight-way.html</link>
  <pubDate>Sun, 18 Aug 2019 14:57:00 +0800</pubDate>
</item>
<item>
  <title>Generating org-mode outlines for wikiHow articles</title>
  <description><![CDATA[
<p>
Recently I found some great articles on <a href="https://www.wikihow.com">wikiHow</a>, then I want to keep notes of them in org-mode files.
</p>

<p>
At first, I manually copied the ToC of articles, but soon I found it's tedious and takes a lot of time.
Today I wrote a Python script to help me extract the ToCs into org-mode outlines. It takes two arguments, the first one is the URL, the second one is the containing heading's level for the generated ToC in org-mode.
</p>

<p>
For example, I can run it from within an org-mode file under a heading called <code>* Test</code>, by executing <code>M-x python wikihow-org-outline.py https://www.wikihow.com/Improve-Your-English 1</code>, then the output outline will be put under the <code>* Test</code> heading.
</p>

<p>
Here is the source code:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #95a5a6; font-style: italic;">#</span><span style="color: #95a5a6; font-style: italic;">!/usr/bin/env python</span>
<span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">-*- coding: utf-8 -*-</span>

<span style="color: #2c3e50; font-style: italic;">from</span> bs4 <span style="color: #2c3e50; font-style: italic;">import</span> BeautifulSoup
<span style="color: #2c3e50; font-style: italic;">import</span> requests
<span style="color: #2c3e50; font-style: italic;">import</span> sys

<span style="color: #2c3e50; font-style: italic;">def</span> <span style="color: #9b59b6;">gen_wikihow_org_outline</span>(url, containing_heading_level=0):
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #16a085;">'''Generating a org outline for the specified article at URL.'''</span>
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">user_agent</span>=<span style="color: #16a085;">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"</span>
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">headers</span>={<span style="color: #16a085;">"User-Agent"</span>:user_agent}
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">html</span> = requests.get(url, headers=headers).content

<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">soup</span> = BeautifulSoup(html, <span style="color: #16a085;">"html.parser"</span>)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">level_prefix</span> = <span style="color: #16a085;">'*'</span> * containing_heading_level

<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">title</span> = soup.select(<span style="color: #16a085;">"h1 &gt; a"</span>)[0].get_text()
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">print</span>(<span style="color: #16a085;">"{}* [[{}][{}]]"</span>.<span style="color: #2c3e50;">format</span>(level_prefix, url, title))

<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">sections</span> = soup.select(<span style="color: #16a085;">"h3 &gt; span"</span>)
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">for</span> section <span style="color: #2c3e50; font-style: italic;">in</span> sections:
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">print</span>(<span style="color: #16a085;">"{}** {}"</span>.<span style="color: #2c3e50;">format</span>(level_prefix, section.get_text()))
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">subsections</span> = section.parent.parent.find_all(<span style="color: #16a085;">"b"</span>, class_=<span style="color: #16a085;">"whb"</span>)
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">for</span> subsection <span style="color: #2c3e50; font-style: italic;">in</span> subsections:
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">subsection_title</span> = subsection.get_text()
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">if</span> <span style="color: #2c3e50;">len</span>(subsection_title) &lt; 3:
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">continue</span> <span style="color: #95a5a6; font-style: italic;"># </span><span style="color: #95a5a6; font-style: italic;">it may contain only ".", just work around it.</span>
<span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">print</span>(<span style="color: #16a085;">"{}*** {}"</span>.<span style="color: #2c3e50;">format</span>(level_prefix, subsection_title))

<span style="color: #3498db;">containing_heading_level</span>=0

<span style="color: #2c3e50; font-style: italic;">if</span> <span style="color: #2c3e50;">len</span>(sys.argv) &lt; 2:
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #2c3e50; font-style: italic;">print</span>(<span style="color: #16a085;">"Usage: {} &lt;url&gt; [containing heading level]"</span>.<span style="color: #2c3e50;">format</span>(sys.argv[0]))
<span style="background-color: #ecf0f1;"> </span>   sys.<span style="color: #7f8c8d; font-style: italic;">exit</span>(1)

<span style="color: #3498db;">url</span> = sys.argv[1]
<span style="color: #2c3e50; font-style: italic;">if</span> <span style="color: #2c3e50;">len</span>(sys.argv) == 3:
<span style="background-color: #ecf0f1;"> </span>   <span style="color: #3498db;">containing_heading_level</span> = <span style="color: #2c3e50;">int</span>(sys.argv[2])

gen_wikihow_org_outline(url, containing_heading_level)
</pre>
</div>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-org-mode.html">Org-mode</a> </div>]]></description>
  <category>Org-mode</category>
  <link>https://whatacold.github.io/2019-07-20-generating-org-mode-outlines-for-wikihow-articles.html</link>
  <pubDate>Sat, 20 Jul 2019 20:04:00 +0800</pubDate>
</item>
<item>
  <title>Understanding align-regexp of Emacs</title>
  <description><![CDATA[
<p>
Emacs' <code>M-x align-regex</code> is neat when I want to align some similar text, especially when we're coding.
I use its trivial version(without prefix arg) regularly on day-to-day programming work before.
</p>

<p>
For example, I can use it to align below code quickly by:
</p>
<ol class="org-ol">
<li>Choose the region</li>
<li><code>M-x align-regexp</code> and type <code>=</code> and <code>Enter</code></li>
</ol>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3498db;">aaaaaaaaaaaaaa</span> = fields[0]
<span style="color: #3498db;">bbb</span> = fields[1]
<span style="color: #3498db;">cccccccc</span> = fields[2]
</pre>
</div>

<p>
It will be aligned to below code, now it's better to read:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3498db;">aaaaaaaaaaaaaa</span> = fields[0]
<span style="color: #3498db;">bbb</span>            = fields[1]
<span style="color: #3498db;">cccccccc</span>       = fields[2]
</pre>
</div>

<p>
A few days ago, I found I didn't understand how it works when I read the code of <a href="https://github.com/manateelazycat/smart-align">smart-align</a>, A simple <code>align-regexp</code> wrapper for easier usage.
I was confused by the parameters, especially <code>REGEXP</code> and <code>GROUP</code>, and <code>SPACING</code>, here is the defun signature:
</p>

<pre class="example">
(align-regexp BEG END REGEXP &amp;optional GROUP SPACING REPEAT)
</pre>

<p>
As for <code>REGEXP</code> and <code>GROUP</code>, as in the above example, I think the regexp should be <code>\(\s-*=\)</code>, so that group 1 will be aligned by prepending spaces.
In fact, it resulted in removing the <code>=</code> for the first line, so I was wrong. The correct regex for it is <code>\(\s-*\)=</code>.
</p>

<p>
After reading a related thread <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> on Emacs Stack Exchange for many times and practicing it along the way, I finally figured out, <b>the key to understanding it</b> is that it works by matching the specified group pattern, then appending it with whitespaces or removing extra whitespaces, so that the alignment character after it, <code>=</code> in this case, will be aligned.
</p>

<p>
As for the <code>SPACING</code>, it means how many spaces should be kept for the "densest" line, 1 will result in <code>aaaaaaaaaaaaaa = fields[0]</code>, 2 will result in <code>aaaaaaaaaaaaaa  = fields[0]</code>, as so on.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
The link is: <a href="https://emacs.stackexchange.com/questions/2644/understanding-of-emacs-align-regexp">https://emacs.stackexchange.com/questions/2644/understanding-of-emacs-align-regexp</a></p></div></div>


</div>
</div><div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">Emacs</a> </div>]]></description>
  <category>Emacs</category>
  <link>https://whatacold.github.io/2019-07-20-understanding-align-regexp-of-emacs.html</link>
  <pubDate>Sat, 20 Jul 2019 13:50:00 +0800</pubDate>
</item>
<item>
  <title>Preview erd on the web</title>
  <description><![CDATA[
<p>
If you ever wonder how to plot ER diagrams in plain text, you may have already heard of <a href="https://github.com/BurntSushi/erd">erd</a>.
It's a cool command line program written by Andrew Gallant in Haskell, to "compile" plain text files into nicely looking images,
leveraging the power of GraphViz.
</p>

<p>
I've used erd for some time, it's cool and the syntax is quite simple.
It's also quite simple to install it on Linux, just install GraphViz and erd itself,
by following the instructions in the README page.
</p>

<p>
But there are times that there isn't an erd environment at hand:
</p>
<ul class="org-ul">
<li>erd is hard to install, or we don't have the permission to install it.</li>
<li>I shared the plain text file with my teammates, but they didn't know how to convert it to an image.</li>
</ul>

<p>
So I think maybe it's useful to have a web application that folks can try it out online,
here it is: <a href="https://serene-forest-18642.herokuapp.com/">erd-repl</a> , a simple Flask application hosted on Heroku.
Although the name REPL, it's far from being a REPL, I think that a REPL helps ease the learning process, be it Emacs REPL, or Python REPL, as it gives you feedback as you type.
</p>

<p>
It's so simple that there isn't any user authentication mechanism, and here are some caveats:
</p>
<ul class="org-ul">
<li>the "source code" of plain text is simply stored in the browser cookie, together with your id.</li>
<li>no edit features, you need to edit it somewhere, e.g. Emacs, and then copied to erd-repl if it's complex, to prevent data loss.</li>
<li>only one image is stored per one user.</li>
<li>imaged will be cleared if being not touched for a few days</li>
</ul>

<p>
After hosting it on Heroku, I found that there is an <a href="https://github.com/BurntSushi/erd/issues/1">issue</a> discussing hosting a web service of erd on GitHub,
take a look too if you're interested.
</p>

<p>
P.S. I know the UI is ugly. I have basic knowledge of CSS, but I just don't have the sense to layout elements properly, what materials/practices would you recommend improving my front end skill at this stage? or any tips on the UI itself?</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-python.html">Python</a> <a href="tag-tools.html">Tools</a> </div>]]></description>
  <category>Python</category>
  <category>Tools</category>
  <link>https://whatacold.github.io/2019-07-06-render-erd-on-the-web.html</link>
  <pubDate>Sat, 06 Jul 2019 11:59:00 +0800</pubDate>
</item>
<item>
  <title>Fine-tune curly braces style of yasnippet snippet on the fly</title>
  <description><![CDATA[
<p>
<a href="https://github.com/joaotavora/yasnippet">Yasnippet</a> is a good friend to help us type less and write more, whenever we write some text snippets repeatedly. And there is also an official repository called <a href="https://github.com/AndreaCrotti/yasnippet-snippets">yasnippet-snippets</a> that contains various snippets for many programming languages(modes), so that we can have many snippets in no time by installing it.
</p>

<p>
But there is a little problem when it comes to conform to different coding styles. Take the <code>if</code> snippet for example, normally it will generate code like this:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #2c3e50; font-style: italic;">if</span> (a) {
    do_something();
}
</pre>
</div>

<p>
This is fine for a K&amp;R style project, but will be kind of annoyed if we work on an allman style project,
because we need to fine-tune the style for every <code>if</code> clauses generated to like this:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #2c3e50; font-style: italic;">if</span> (a)
{
    do_something();
}
</pre>
</div>

<p>
How to fine-tune the coding styles according to the project requirement? Or at least curly braces styles, which is the one that matters most for me.
</p>

<p>
Maintaining two similar copies for every snippet is obviously not a good option, it's daunting and boring.
</p>

<p>
Fortunately, yasnippet provides a hook called <code>yas-after-exit-snippet-hook</code>, which I can take advantage of to adjust the curly braces style when needed. Below is a trivial hook that I come up with, it assumes that the snippets are in K&amp;R style, which is the style that yasnippet-snippet takes, and I prepend <code>{</code> with newlines and surround <code>}</code> with newlines when this behaviour is asked by setting <code>(setq whatacold/yasnippet-c-style 'allman)</code> .
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #2c3e50; font-style: italic;">defun</span> <span style="color: #9b59b6;">whatacold/style-braces-in-allman</span> (snippet)
  <span style="color: #16a085;">"Style the SNIPPET in allman brace style.</span>

<span style="color: #16a085;">There are roughly 3 basic brace styles:</span>
<span style="color: #16a085;">- Attached: The braces are attached to the end of the last line of the previous block. (Java).</span>
<span style="color: #16a085;">- Broken: The braces are broken from the previous block. (Allman).</span>
<span style="color: #16a085;">- Linux: The braces are attached except for the opening brace of a function, class, or namespace (K&amp;R, Linux).</span>

<span style="color: #16a085;">http://astyle.sourceforge.net/astyle.html#_Basic_Brace_Styles"</span>
  (<span style="color: #2c3e50; font-style: italic;">let</span> ((len (length snippet))
        (i 0)
        chars char new-str)
    (<span style="color: #2c3e50; font-style: italic;">while</span> (&lt; i len)
      (<span style="color: #2c3e50; font-style: italic;">setq</span> char (aref snippet i))
      (<span style="color: #2c3e50; font-style: italic;">case</span> char
        (?{
         (<span style="color: #2c3e50; font-style: italic;">push</span> ?\n chars)
         (<span style="color: #2c3e50; font-style: italic;">push</span> char chars))
        (?}
         (<span style="color: #2c3e50; font-style: italic;">push</span> ?\n chars)
         (<span style="color: #2c3e50; font-style: italic;">push</span> char chars)
         (<span style="color: #2c3e50; font-style: italic;">push</span> ?\n chars))
        (t
         (<span style="color: #2c3e50; font-style: italic;">push</span> char chars)))
      (<span style="color: #2c3e50; font-style: italic;">setq</span> i (1+ i)))
    (<span style="color: #2c3e50; font-style: italic;">setq</span> new-str (replace-regexp-in-string <span style="color: #16a085;">"[\n \t]+\n"</span>
                                            <span style="color: #16a085;">"\n"</span>
                                            (apply #'string (nreverse chars))))
    new-str))

(<span style="color: #2c3e50; font-style: italic;">defcustom</span> <span style="color: #3498db;">whatacold/yasnippet-c-style</span> nil
  <span style="color: #16a085;">"Style of curly braces, e.g. 'allman."</span>
  <span style="color: #2c3e50;">:type</span> '(symbol))

(<span style="color: #2c3e50; font-style: italic;">defun</span> <span style="color: #9b59b6;">whatacold/yasnippet-exit-hook-c</span> ()
  (<span style="color: #2c3e50; font-style: italic;">let*</span> ((text-marker <span style="color: #16a085;">"the-yasnippet-exit-point;"</span>) <span style="color: #95a5a6; font-style: italic;">; </span><span style="color: #95a5a6; font-style: italic;">workaround. text property is more elegant.</span>
         (begin yas-snippet-beg)
         (end yas-snippet-end)
         (snippet (buffer-substring-no-properties begin end))
         new-snippet)
    (<span style="color: #2c3e50; font-style: italic;">when</span> (<span style="color: #2c3e50; font-style: italic;">and</span> (string-match <span style="color: #16a085;">"[{}]"</span> snippet)
               (eq 'allman whatacold/yasnippet-c-style))
      (insert text-marker)
      (<span style="color: #2c3e50; font-style: italic;">setq</span> end (+ yas-snippet-end (length text-marker)))

      (<span style="color: #2c3e50; font-style: italic;">setq</span> snippet (buffer-substring-no-properties begin end)) <span style="color: #95a5a6; font-style: italic;">; </span><span style="color: #95a5a6; font-style: italic;">re-fetch content</span>
      (<span style="color: #2c3e50; font-style: italic;">setq</span> new-snippet (whatacold/style-braces-in-allman snippet))
      (delete-region begin end)
      (insert new-snippet)

      (goto-char begin)
      <span style="color: #95a5a6; font-style: italic;">;; </span><span style="color: #95a5a6; font-style: italic;">re-indent it in the context</span>
      (indent-region begin (+ end (- (length new-snippet)
                                     (length snippet))))
      (re-search-forward text-marker)
      (delete-char (- 0 (length text-marker))))))

(<span style="color: #2c3e50; font-style: italic;">defun</span> <span style="color: #9b59b6;">whatacold/yasnippet-exit-hook</span> ()
  <span style="color: #16a085;">"My yasnippet exit hook."</span>
  (<span style="color: #2c3e50; font-style: italic;">case</span> major-mode
    ((c-mode c++-mode)
     (whatacold/yasnippet-exit-hook-c))))

<span style="color: #95a5a6; font-style: italic;">;; </span><span style="color: #95a5a6; font-style: italic;">see https://github.com/joaotavora/yasnippet/issues/728</span>
(add-to-list 'yas-after-exit-snippet-hook #'whatacold/yasnippet-exit-hook)
</pre>
</div>

<p>
Now the coding experience is much better :)</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">Emacs</a> </div>]]></description>
  <category>Emacs</category>
  <link>https://whatacold.github.io/2019-02-24-fine-tune-curly-brace-style-of-yasnippet-snippet-on-the-fly.html</link>
  <pubDate>Sun, 10 Mar 2019 16:48:00 +0800</pubDate>
</item>
<item>
  <title>记一个 Emacs Keyboard Macro 输入字符重复的 Bug</title>
  <description><![CDATA[
<p>
工作中不时地会使用 Emacs keyboard macro 来解决重复性的编辑任务，
但有时录制了再重放却出现输入的字符被重复了，导致出现非预期的结果。
一般此时为了赶进度，只好忍了，放弃 keyboard macro ，通过其他方式编辑了。
</p>

<p>
诡异的是等到有空闲的时候尝试重现却又重现不了，还一度以为是由于 keyboard macro 不支持输入 <code>M-x</code> 命令导致的，
但又没看到其他 Emacser 提到有此限制。
</p>

<p>
问题虽然偶尔才出现，但是一旦出现，工作流会被打断，很让人苦恼。
好在春节期间终于被我重现出来了，在启用 <a href="https://github.com/tumashu/pyim">pyim</a> 输入法的情况下必现，比如在录制时输入 <code>nihao</code> 得到了 <code>你好</code> ，
但是在 replay keyboard macro 的时候，得到的效果却相当于人工输入了 <code>nniihhaaoo</code> ，每个输入字符都被重复了一次，
自然就没法得到 <code>你好</code> 二字，详细的重现步骤见这个 pyim <a href="https://github.com/tumashu/pyim/issues/247">issue</a> 。
</p>

<p>
@tumashu 帮忙确认了 Emacs 自带的 quail-chinese 输入法也有此问题，建议我去 mailing list 问下看看。
最后 Emacs maintainer Eli Zaretskii 在 <a href="http://lists.gnu.org/archive/html/bug-gnu-emacs/2019-02/msg00391.html">这个 thread</a> 告知半年前已经有人在 <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=32108">Bug #32108</a> 中报告了，
且已经在 master 中修复了（ <a href="https://github.com/emacs-mirror/emacs/commit/03e3440dbbfea40b449a9f6f23a3630664275d11">commit 03e3440dbbfea40b449a9f6f23a3630664275d11</a> ），将会包含在 Emacs 27 发布中。
</p>

<p>
修复原理大致是在内核中增加一个标记 <code>inhibit--record-char</code> ，由输入法根据情况设置为 <code>t/nil</code> ，
当值为 <code>t</code> 时内核不会把事件记录到 <code>last-kbd-macro</code> 中（见 <code>record-char</code> 函数），
这样输入法出于实现需要重放的用户输入字符，就不会被重复记录到 keyboard macro 中。
</p>

<p>
Emacs 自带的输入法虽然已经解决了问题，但是 pyim 还没解决，接下来如果有时间再研究下如何解决（ Emacs 27 已经编译好了 :) ），
在彻底解决之前，如果在录制 keyboard macro 时不需要输入中文，可以通过 <code>M-x toggle-input-method</code> 切换回英文输入来 workaround ，
这样就能避开这个 bug ，继续用 keyboard macro 来编辑文本。</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">Emacs</a> </div>]]></description>
  <category>Emacs</category>
  <link>https://whatacold.github.io/2019-02-03-emacs-kmacro-characters-repeated-bug.html</link>
  <pubDate>Sun, 17 Feb 2019 18:05:00 +0800</pubDate>
</item>
<item>
  <title>如何理解 Git submodule</title>
  <description><![CDATA[
<p>
Git 虽然很强大，但也有少数命令很难理解。
submodule 就是这么一个例子，其文档教程也不少，比如 <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git - Submodules - git-scm.com</a> ，
但我之前始终没有真正领悟到如何使用。
</p>

<p>
直到有天看了一条  <a href="https://stackoverflow.com/a/5814351/910978">StackOverflow Answer</a> ，茅塞顿开，才真正理解了 submodule 。
</p>

<p>
submodule 涉及到两个仓库类型：
</p>
<dl class="org-dl">
<dt>submodule</dt><dd>子模块，比如需要使用的第三方库</dd>
<dt>superproject</dt><dd>主仓库，自己的工程，依赖子模块代码</dd>
</dl>

<p>
Git submodule 本质上是两个独立的仓库，各自可以独立地像普通的 repo 一样操作。
同时 superproject 有一个“指针”，记录了它使用的子模块的 commit revision 。
这个“指针”对于从 SVN 转过来的同学来说会比较不适应，因为 SVN External 没有这个设计，
所以 SVN 无法精确控制所使用的子模块 revision  ，更新主仓库时会自动更新其“子模块”的代码为最新的，
如果“子模块”是外部的代码并且不稳定的话，会影响自己的代码。
</p>

<p>
带着这个认知，在 superproject 中更新 submodule 的操作步骤示意如下：
<img src="./images/2019-01-13-git-submodule-diagram.png" alt="2019-01-13-git-submodule-diagram.png">
</p>

<p>
无论是 superproject 还是 submodule ，都像普通的 repo 一样进行 branch, add, push, diff 等等的操作，
只是最后再通过 <code>git submodule</code> 命令再更新下新“指针”位置即可。</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-git.html">Git</a> </div>]]></description>
  <category>Git</category>
  <link>https://whatacold.github.io/2019-01-13-understand-git-submodule.html</link>
  <pubDate>Sun, 17 Feb 2019 16:07:00 +0800</pubDate>
</item>
<item>
  <title>在 Emacs 中使用 LSP 开发 C/C++ 工程</title>
  <description><![CDATA[
<p>
写代码的时候，如果能够基于当前的上下文提示补全，不仅能提高写代码的效率，还能提升体验，有种行云流水的感觉。
Emacs 中之前我用 gtags 等静态的工具来辅助写代码，最大的问题是无法根据上下文补全，体验不好。
有了 LSP 协议之后， Emacs 中现在也能实现这个功能了，体验相当不错。
前段时间折腾了一下，在此作个小结。
</p>

<p>
目前 Emacs 上有两个客户端实现： <a href="https://github.com/joaotavora/eglot">eglot</a> 和 <a href="https://github.com/emacs-lsp/lsp-mode">lsp-mode</a> ，由于 eglot 相对比较简洁，只需要很少的配置，因此我就选它了（暂时还没试过 lsp-mode ，等有需要时再看）。
</p>

<p>
对于服务端，目前有三个选择 clangd,  <a href="https://github.com/cquery-project/cquery">cquery</a> 和 <a href="https://github.com/MaskRay/ccls">ccls</a> ， ccls 是在 cquery 的基础之上 fork 改进的。
clangd 安装最简单，但功能据说比较弱，我没有试过；一开始我在自己电脑上编译了 ccls ，再把二进制文件拷贝到公司机器，
但是补全始终有问题（怀疑必须在使用的机器上编译，直接拷贝行不通），没有找到具体的原因；
后来在公司机器上直接编译了 cquery ，可以补全，就没有再折腾 ccls 了。
</p>

<p>
选定了客户端和服务端之后，接下来就是对具体工程的配置了， cquery 和 ccls 都要求工程根目录有 compilation database 或者 <code>.cquery</code> / <code>.ccls</code> 文件。
由于我们的工程都是用 GNU Make 进行构建的，没法使用 <code>cmake</code> 直接生成 compilation database 。
其他方案比如 <a href="https://github.com/rizsotto/Bear">Bear</a> ，由于我们的工具链太老，没有 <code>cmake</code> 无法编译 <code>Bear</code> ，因此也派不上用场。
至此由于无法生成服务器的配置文件，看来似乎与 LSP 无缘了。
</p>

<p>
后来有一天，突然想到可以直接自己解析 <code>make</code> 的输出（就用 Elisp ），解析 <code>Entering directory</code> , <code>Leaving directory</code> 以及 <code>g++</code> 编译的相关行，
提取生成为 <code>compile_commands.json</code> ，这样就无须再依赖其他软件。
但是此方法有一个缺点，在新增文件的时候，得人工在 json 文件中增加一条记录，比较麻烦，不易维护。
</p>

<p>
其实此种情况下直接用 <code>.cquery</code> 文件最好，无需指定特定的源码文件，
只需要配置编译选项以及头文件目录，因此新增文件时不需要修改。
举一个 cquery wiki 中的 <a href="https://github.com/cquery-project/cquery/wiki/.cquery">例子</a> ：
</p>

<pre class="example">
# it will expend to clang/clang++ according to the extension name
%clang

# C specific options
%c -std=gnu11

# C++ specific options
%cpp -std=gnu++14
-pthread

# Includes
-I/work/cquery/third_party
-I/work/cquery/another_third_party
# -I space_is_not_allowed
</pre>


<p>
到此似乎万事俱备，可以愉快地写代码了，最终却发现还有一个问题：由于历史原因，我们的工程源码都是使用 GBK 编码的，
但是 LSP 只支持 UTF-8 ，导致由于编码问题无法显示类、函数注释的问题，当时还在 eglot 提了一个 <a href="https://github.com/joaotavora/eglot/issues/135">issue</a> （其实不是 eglot 的问题）。
</p>

<p>
为了解决这个问题想过几种方法：
</p>
<ol class="org-ol">
<li>cquery 中在输出之前，把内容转为 UTF-8 编码（利用 <code>iconv</code> 库）</li>
<li><code>eglot</code> 在解析服务端返回的数据时，根据指定的编码进行 decode</li>
</ol>

<p>
第一种方法适用面太窄，因为 LSP 的实现还不是非常成熟，有时需要切换到 <code>ccls</code> 来体验，
这就意味着得在 <code>ccls</code> 中也用 <code>iconv</code> 再转一道，太麻烦，不符合 <code>DRY</code> 的原则。
</p>

<p>
第二种方法，需要在 <code>eglot.el</code> 和其依赖的低层通信库 <code>jsonrpc.el</code> 中同时服务端传回数据的编码方式。
当时也实现了，后来觉得不是很直接、优雅，就没再继续用了。另外，如果有一天改用 lsp-mode ，
那又需要在 lsp-mode 中做一遍类似的修改，同样也不符合 <code>DRY</code> 原则。
</p>

<p>
最后使用了适配器的 <a href="https://github.com/whatacold/lsa">方案</a> ，使用 Python 3 实现，既不动客户端也不动服务端，在中间加一层，用于转换服务端的编码。
这样就是一个比较通用的方案了，能适配所有的客户端和服务端。
</p>

<p>
在 eglot 中根据项目的编码情况（通过 <code>.dir-locals.el</code> 区分）决定是否使用此适配器：
</p>

<div class="org-src-container">
<pre class="src src-elisp">
(<span style="color: #2c3e50; font-style: italic;">defcustom</span> <span style="color: #3498db;">ccls-init-args</span> nil
  <span style="color: #16a085;">"Init args for ccls, e.g. '(:clang (:extraArgs (\"-std=c++03\")))"</span>)

(<span style="color: #2c3e50; font-style: italic;">defcustom</span> <span style="color: #3498db;">eglot-ls-output-encoding</span> <span style="color: #16a085;">"utf-8"</span>
  <span style="color: #16a085;">"The LS's output encoding"</span>)

(<span style="color: #2c3e50; font-style: italic;">defcustom</span> <span style="color: #3498db;">eglot-cpp-ls</span> <span style="color: #16a085;">"cquery"</span>
  <span style="color: #16a085;">"The language server for C/C++."</span>)

(<span style="color: #2c3e50; font-style: italic;">defun</span> <span style="color: #9b59b6;">whatacold/eglot-ccls-contact</span> (interactive-p)
  <span style="color: #16a085;">"A contact function to assemble args for ccls.</span>
<span style="color: #16a085;">Argument INTERACTIVE-P indicates where it's called interactively."</span>
  (<span style="color: #2c3e50; font-style: italic;">let</span> ((json-object-type 'plist)
        (json-array-type 'list)
        result)
    (<span style="color: #2c3e50; font-style: italic;">cond</span> ((equal <span style="color: #16a085;">"ccls"</span> eglot-cpp-ls)
           (<span style="color: #2c3e50; font-style: italic;">push</span> (format <span style="color: #16a085;">"-log-file=/tmp/ccls-%s.log"</span>
                         (file-name-base
                          (directory-file-name
                           (car
                            (project-roots
                             (project-current))))))
                 result)
           (<span style="color: #2c3e50; font-style: italic;">when</span> ccls-init-args
             (<span style="color: #2c3e50; font-style: italic;">push</span> (format <span style="color: #16a085;">"-init=%s"</span> (json-encode
                                       ccls-init-args))
                   result))
           (<span style="color: #2c3e50; font-style: italic;">push</span> <span style="color: #16a085;">"ccls"</span> result))
          ((equal <span style="color: #16a085;">"cquery"</span> eglot-cpp-ls)
           (<span style="color: #2c3e50; font-style: italic;">setq</span> result (list <span style="color: #16a085;">"cquery"</span> <span style="color: #16a085;">"--log-all-to-stderr"</span>)))
          (t <span style="color: #95a5a6; font-style: italic;">; </span><span style="color: #95a5a6; font-style: italic;">e.g. clangd</span>
           (<span style="color: #2c3e50; font-style: italic;">push</span> eglot-cpp-ls result)))
    <span style="color: #95a5a6; font-style: italic;">;; </span><span style="color: #95a5a6; font-style: italic;">apply the adapter if necessary</span>
    (<span style="color: #2c3e50; font-style: italic;">unless</span> (equal eglot-ls-output-encoding <span style="color: #16a085;">"utf-8"</span>)
      (<span style="color: #2c3e50; font-style: italic;">dolist</span> (item (reverse (list <span style="color: #16a085;">"lsa.py"</span>
                                   (concat <span style="color: #16a085;">"--original-response-encoding="</span>
                                           eglot-ls-output-encoding)
                                   <span style="color: #16a085;">"--log-level=DEBUG"</span>
                                   <span style="color: #16a085;">"--"</span>)))
        (<span style="color: #2c3e50; font-style: italic;">push</span> item result)))
    <span style="color: #95a5a6; font-style: italic;">;; </span><span style="color: #95a5a6; font-style: italic;">cquery should apply the specific class in eglot</span>
    (<span style="color: #2c3e50; font-style: italic;">when</span> (equal <span style="color: #16a085;">"cquery"</span> eglot-cpp-ls)
      (<span style="color: #2c3e50; font-style: italic;">push</span> 'eglot-cquery result))
    result))

(eval-after-load 'eglot
  '(<span style="color: #2c3e50; font-style: italic;">progn</span>
     (add-to-list 'eglot-server-programs
                  (cons '(c-mode c++-mode foo-mode) #'whatacold/eglot-ccls-contact))))
</pre>
</div>

<p>
至此 LSP 基本可用了。</p>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-emacs.html">Emacs</a> <a href="tag-c++.html">C++</a> <a href="tag-python.html">Python</a> </div>]]></description>
  <category>Emacs</category>
  <category>C++</category>
  <category>Python</category>
  <link>https://whatacold.github.io/2018-12-22-c-cpp-devel-with-lsp-in-emacs.html</link>
  <pubDate>Sat, 22 Dec 2018 20:24:00 +0800</pubDate>
</item>
<item>
  <title>C++ 多态是如何实现的？</title>
  <description><![CDATA[
<p>
对于 OOP 编程，相信大家对于多态（ polymorphism ）肯定都耳熟能详。
但是对于多态是如何实现的，我不知道大家是否清楚，但我发现自己并不是很了解，
只知道在运行时通过一个 vtable 来确定应该调用哪个函数，
实际上 vtable 真的存在吗？它是如何起作用的？
</p>

<p>
首先我们来看下普通方法的调用情况，比如 <code>non-virtual-class.cpp</code> 有一个类及其方法调用：
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #2c3e50; font-style: italic;">class</span> <span style="color: #27ae60;">Base</span>
{
<span style="color: #2c3e50; font-style: italic;">public</span>:
    <span style="color: #27ae60;">int</span> <span style="color: #9b59b6;">foo</span>() { <span style="color: #2c3e50; font-style: italic;">return</span> 1; }
};

<span style="color: #2c3e50; font-style: italic;">class</span> <span style="color: #27ae60;">Derived</span>
{
<span style="color: #2c3e50; font-style: italic;">public</span>:
    <span style="color: #27ae60;">int</span> <span style="color: #9b59b6;">bar</span>() { <span style="color: #2c3e50; font-style: italic;">return</span> 2; }
};

<span style="color: #27ae60;">int</span> <span style="color: #9b59b6;">main</span>(<span style="color: #27ae60;">void</span>)
{
    <span style="color: #27ae60;">Derived</span> <span style="color: #3498db;">foo</span>;

    <span style="color: #2c3e50; font-style: italic;">return</span> foo.bar();
}
</pre>
</div>

<p>
<code>g++ -g -O0 non-virtual-class.cpp</code> 编译之后，用 <code>gdb a.out</code> 查看它的汇编代码：
</p>

<pre class="example">
(gdb) disas main
Dump of assembler code for function main():
   0x00000000004004b6 &lt;+0&gt;:	push   %rbp
   0x00000000004004b7 &lt;+1&gt;:	mov    %rsp,%rbp
   0x00000000004004ba &lt;+4&gt;:	sub    $0x10,%rsp
   0x00000000004004be &lt;+8&gt;:	lea    -0x1(%rbp),%rax               ; &amp;foo
   0x00000000004004c2 &lt;+12&gt;:	mov    %rax,%rdi
   0x00000000004004c5 &lt;+15&gt;:	callq  0x4004ce &lt;Derived::bar()&gt; ; 确定的函数地址
   0x00000000004004ca &lt;+20&gt;:	nop
   0x00000000004004cb &lt;+21&gt;:	leaveq 
   0x00000000004004cc &lt;+22&gt;:	retq   
End of assembler dump.
(gdb) disas Derived::bar
Dump of assembler code for function Derived::bar():
   0x00000000004004ce &lt;+0&gt;:	push   %rbp
   0x00000000004004cf &lt;+1&gt;:	mov    %rsp,%rbp
   0x00000000004004d2 &lt;+4&gt;:	mov    %rdi,-0x8(%rbp)
   0x00000000004004d6 &lt;+8&gt;:	mov    $0x2,%eax                     ; return 2
   0x00000000004004db &lt;+13&gt;:	pop    %rbp
   0x00000000004004dc &lt;+14&gt;:	retq   
End of assembler dump.
</pre>

<p>
可以发现与普通的 C 函数调用类似，编译之后就已经确定好了调用 <code>Foo::incrNum</code> 方法，
除了把对象自身地址作为隐藏的第一个参数传入之外并没有什么不同。
也就是说对于普通不含虚函数的类对象，在编译过程中就确定了其方法的调用，没有运行时开销。
</p>

<p>
那么，在多态场景下，类方法的调用又是怎样的呢？这里还是从汇编的角度观察。
以同样参数编译如下 <code>virtual-class-polymorphism.cpp</code> 文件，然后用 gdb 观察运行时信息：
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #2c3e50; font-style: italic;">class</span> <span style="color: #27ae60;">Base</span>
{
<span style="color: #2c3e50; font-style: italic;">public</span>:
    <span style="color: #2c3e50; font-style: italic;">virtual</span> <span style="color: #27ae60;">void</span> <span style="color: #9b59b6;">foo</span>() {};
};

<span style="color: #2c3e50; font-style: italic;">class</span> <span style="color: #27ae60;">Derived</span> : <span style="color: #2c3e50; font-style: italic;">public</span> <span style="color: #27ae60;">Base</span>
{
<span style="color: #2c3e50; font-style: italic;">public</span>:
    <span style="color: #27ae60;">void</span> <span style="color: #9b59b6;">foo</span>() {};
};

<span style="color: #27ae60;">int</span> <span style="color: #9b59b6;">main</span>(<span style="color: #27ae60;">void</span>)
{
    <span style="color: #27ae60;">Base</span> *<span style="color: #3498db;">p</span> = <span style="color: #2c3e50; font-style: italic;">new</span> <span style="color: #27ae60;">Derived</span>;
    p-&gt;foo();

    <span style="color: #2c3e50; font-style: italic;">return</span> 0;
}
</pre>
</div>

<p>
这次我们通过在 GDB 运行时观察：
</p>
<pre class="example">
;; 设置解析符号及断点，启动程序
(gdb) set print asm-demangle on
(gdb) set print demangle on
(gdb) b main
Breakpoint 1 at 0x40061f: file virtual-class-polymorphism.cpp, line 15.
(gdb) r
Starting program: /home/hgw/demo-code/cpp/vtable/a.out 
Missing separate debuginfos, use: dnf debuginfo-install glibc-2.27-30.fc28.x86_64

Breakpoint 1, main () at virtual-class-polymorphism.cpp:15
15	    Base *p = new Derived;
Missing separate debuginfos, use: dnf debuginfo-install libgcc-8.1.1-5.fc28.x86_64 libstdc++-8.1.1-5.fc28.x86_64
(gdb) p p
$1 = (Base *) 0x400530 &lt;_start&gt;
(gdb) n
16	    p-&gt;foo();

(gdb) p p
$2 = (Base *) 0x613e70
(gdb) x/16xb p
0x613e70:	0x40	0x07	0x40	0x00	0x00	0x00	0x00	0x00
0x613e78:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
;; 可以看到对象中包含了一个 vptr ，指向 vtable 的一个偏移位置
(gdb) p *p
$3 = {_vptr.Base = 0x400740 &lt;vtable for Derived+16&gt;}

;; 再看 vtable 中的内容，注意这里已经去掉了偏移量16
;; 可以看到先是两个 vtable ，再是 typeinfo ， typeinfo name ，后两者是 RTTI 相关，本文暂不了解。
(gdb) x/200xb 0x400730
0x400730 &lt;vtable for Derived&gt;:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x400738 &lt;vtable for Derived+8&gt;:	0x60	0x07	0x40	0x00	0x00	0x00	0x00	0x00
0x400740 &lt;vtable for Derived+16&gt;:	0x64	0x06	0x40	0x00	0x00	0x00	0x00	0x00
0x400748 &lt;vtable for Base&gt;:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x400750 &lt;vtable for Base+8&gt;:	0x88	0x07	0x40	0x00	0x00	0x00	0x00	0x00
0x400758 &lt;vtable for Base+16&gt;:	0x58	0x06	0x40	0x00	0x00	0x00	0x00	0x00
0x400760 &lt;typeinfo for Derived&gt;:	0xa8	0x0d	0x60	0x00	0x00	0x00	0x00	0x00
0x400768 &lt;typeinfo for Derived+8&gt;:	0x78	0x07	0x40	0x00	0x00	0x00	0x00	0x00
0x400770 &lt;typeinfo for Derived+16&gt;:	0x88	0x07	0x40	0x00	0x00	0x00	0x00	0x00
0x400778 &lt;typeinfo name for Derived&gt;:	0x37	0x44	0x65	0x72	0x69	0x76	0x65	0x64
0x400780 &lt;typeinfo name for Derived+8&gt;:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x400788 &lt;typeinfo for Base&gt;:	0x50	0x0d	0x60	0x00	0x00	0x00	0x00	0x00
0x400790 &lt;typeinfo for Base+8&gt;:	0x98	0x07	0x40	0x00	0x00	0x00	0x00	0x00
0x400798 &lt;typeinfo name for Base&gt;:	0x34	0x42	0x61	0x73	0x65	0x00	0x00	0x00
0x4007a0:	0x01	0x1b	0x03	0x3b	0x5c	0x00	0x00	0x00
;; 这里省略一些无意义的输出

;; 查看 &lt;vtable for Derived+16&gt; 地址中存储的内容，可以看到就是函数指针
(gdb) info symbol 0x400664
Derived::foo() in section .text of /home/hgw/demo-code/cpp/vtable/a.out
;; 查看 &lt;vtable for Derived+8&gt; 地址中存储的内容，指向 typeinfo 内存位置
(gdb) info symbol 0x400760
typeinfo for Derived in section .rodata of /home/hgw/demo-code/cpp/vtable/a.out
</pre>

<p>
现在再回过头来看静态的汇编代码，就容易理解了：
</p>
<pre class="example">
(gdb) disas main
Dump of assembler code for function main():
   0x0000000000400616 &lt;+0&gt;:	push   %rbp
   0x0000000000400617 &lt;+1&gt;:	mov    %rsp,%rbp
   0x000000000040061a &lt;+4&gt;:	push   %rbx
   0x000000000040061b &lt;+5&gt;:	sub    $0x18,%rsp
   0x000000000040061f &lt;+9&gt;:	mov    $0x8,%edi                         ; sizeof Derived 变为了 8 字节
   0x0000000000400624 &lt;+14&gt;:	callq  0x400520 &lt;_Znwm@plt&gt;          ; new 对象
   0x0000000000400629 &lt;+19&gt;:	mov    %rax,%rbx                     ; 地址 p
   0x000000000040062c &lt;+22&gt;:	mov    %rbx,%rdi
   0x000000000040062f &lt;+25&gt;:	callq  0x400688 &lt;Derived::Derived()&gt; ; constructor
   0x0000000000400634 &lt;+30&gt;:	mov    %rbx,-0x18(%rbp)
   0x0000000000400638 &lt;+34&gt;:	mov    -0x18(%rbp),%rax              ; 地址 p ，指向对象存储空间
   0x000000000040063c &lt;+38&gt;:	mov    (%rax),%rax                   ; 取对象内容，其实就是 vptr 值
   0x000000000040063f &lt;+41&gt;:	mov    (%rax),%rax                   ; 取 vptr 指向地址的内容，就是上边看到的 &lt;vtable for Derived+16&gt;
   0x0000000000400642 &lt;+44&gt;:	mov    -0x18(%rbp),%rdx
   0x0000000000400646 &lt;+48&gt;:	mov    %rdx,%rdi                     ; 把地址 p 作为第一个参数（ this ）传入
   0x0000000000400649 &lt;+51&gt;:	callq  *%rax                         ; 调用 vtable 中指定的函数
   0x000000000040064b &lt;+53&gt;:	mov    $0x0,%eax
   0x0000000000400650 &lt;+58&gt;:	add    $0x18,%rsp
   0x0000000000400654 &lt;+62&gt;:	pop    %rbx
   0x0000000000400655 &lt;+63&gt;:	pop    %rbp
   0x0000000000400656 &lt;+64&gt;:	retq   
End of assembler dump.
</pre>

<p>
综上，可以把相关的内存布局绘制成如下图：
</p>


<figure>
<img src="./images/2018-12-10-vtable.png" alt="2018-12-10-vtable.png">

</figure>

<p>
从以上分析可以看出， vtable 确实存在，程序运行时根据 vtable 查找对应的函数（此过程叫做 dynamic dispatch ）。
若在不必要的场景下定义了虚函数，一方面会使得对象占用的内存变大，
另一方面在调用虚函数时，需要查找 vtable ，有一定的性能损耗，因此编程时应当避免此情况。
</p>

<p>
延伸阅读、参考资料：
</p>
<ul class="org-ul">
<li><p>
<a href="https://shaharmike.com/cpp/vtable-part1/">C++ vtables - Part 1 - Basics | Shahar Mike's Web Spot - shaharmike.com</a>
</p>

<p>
此系列文章深入讲解了 C++ 的 vtable 和 RTTI 实现原理，本文主要参考了其中的第一篇。
</p></li>
<li><a href="http://lifegoo.pluskid.org/upload/doc/object_models/C++%20Object%20Model.pdf">C++ Object Model.pdf - lifegoo.pluskid.org</a></li>
<li>Stanley B·Lippman <a href="https://book.douban.com/subject/1091086/">Inside the C++ Object Model</a></li>
</ul>
<div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-c++.html">C++</a> <a href="tag-gdb.html">GDB</a> </div>]]></description>
  <category>C++</category>
  <category>GDB</category>
  <link>https://whatacold.github.io/2018-12-10-how-polymorphism-works-in-cpp.html</link>
  <pubDate>Mon, 10 Dec 2018 00:16:00 +0800</pubDate>
</item>
</channel>
</rss>
