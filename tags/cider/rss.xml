<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cider on Ken Huang</title>
    <link>https://whatacold.io/tags/cider/</link>
    <description>Recent content in Cider on Ken Huang</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>whatacold@gmail.com (Ken Huang)</managingEditor>
    <webMaster>whatacold@gmail.com (Ken Huang)</webMaster>
    <lastBuildDate>Wed, 26 Feb 2025 00:11:19 +0800</lastBuildDate>
    <atom:link href="https://whatacold.io/tags/cider/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with Cider for Clojure Programming</title>
      <link>https://whatacold.io/blog/2024-12-22-getting-started-with-cider/</link>
      <pubDate>Sun, 22 Dec 2024 17:17:15 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-12-22-getting-started-with-cider/</guid>
      <description>Here is the outline for my cider tutorial on YouTube, covering basic things you need to know to get started with cider, and starting exploring the fun of clojure programming with the REPL-driven programming approach.&#xA;Jack In to a REPL C-c M-j (cider-jack-in-clj) start a nREPL and jack in. It works in a project or with a sole .clj file. M-x cider-connect-clj run the command and then fill in hostname and port.</description>
    </item>
    <item>
      <title>A Few Quick Notes About babashka/fs</title>
      <link>https://whatacold.io/blog/2024-12-07-babashka-fs-notes/</link>
      <pubDate>Sat, 07 Dec 2024 22:24:41 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-12-07-babashka-fs-notes/</guid>
      <description>Recently I&amp;#39;ve used babashka/fs a little bit, here are some quick notes for it:&#xA;Path vs File. Use Path whenever possible, according to this SO answer to &amp;#34;Java: Path vs File&amp;#34;. This is actually Java related. It&amp;#39;s ok to use a path as a key for a clojure map. At my first try, I somehow came to the conclusion that it&amp;#39;s not ok, while I was refactoring the live reload for clay.</description>
    </item>
    <item>
      <title>Doing Unit test in Clojure Is Easy</title>
      <link>https://whatacold.io/blog/2024-11-27-clojure-unit-test/</link>
      <pubDate>Thu, 28 Nov 2024 23:10:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-27-clojure-unit-test/</guid>
      <description>While refactoring the live reload feature of Clay, I realized I&amp;#39;d better break long functions into smaller and functional ones (as many as I can), which is also a common practice in the clojure community.&#xA;Small pure functions not only are easy to verify on the development process (using a REPL), but also are easy to test. And unit tests are easy to write in clojure, just use deftest from clojure.</description>
    </item>
    <item>
      <title>Starting a Clojure nREPL Manually for Cider</title>
      <link>https://whatacold.io/blog/2024-11-08-cider-clojure-repl-cmdline/</link>
      <pubDate>Fri, 08 Nov 2024 00:02:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-08-cider-clojure-repl-cmdline/</guid>
      <description>While troubleshooting and fixing a live reload bug in Clay today, which required to start a minimal Clojure environment, I figured out how to start a nREPL from the command line.&#xA;Instead of using M-x cider-jack-in-clj directly from Emacs, actually we can manully bring up an nREPL with this: clj -Sdeps &amp;#34;{:deps {org.scicloj/clay {:mvn/version \&amp;#34;2-beta21\&amp;#34;} cider/cider-nrepl {:mvn/version \&amp;#34;0.50.2\&amp;#34;}}}&amp;#34; -m nrepl.cmdline --middleware &amp;#34;[cider.nrepl/cider-middleware]&amp;#34; (The clay part is only necessary for this debugging), and then connect to this nREPL using the Emacs command M-x cider-connect-clj.</description>
    </item>
  </channel>
</rss>
