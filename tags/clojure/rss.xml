<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on Ken Huang</title>
    <link>https://whatacold.io/tags/clojure/</link>
    <description>Recent content in Clojure on Ken Huang</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>whatacold@gmail.com (Ken Huang)</managingEditor>
    <webMaster>whatacold@gmail.com (Ken Huang)</webMaster>
    <lastBuildDate>Sun, 22 Dec 2024 17:55:03 +0800</lastBuildDate>
    <atom:link href="https://whatacold.io/tags/clojure/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with Cider for Clojure Programming</title>
      <link>https://whatacold.io/blog/2024-12-22-getting-started-with-cider/</link>
      <pubDate>Sun, 22 Dec 2024 17:17:15 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-12-22-getting-started-with-cider/</guid>
      <description>Here is the outline for my cider tutorial on YouTube, covering basic things you need to know to get started with cider, and starting exploring the fun of clojure programming with the REPL-driven programming approach.&#xA;Jack In to a REPL C-c M-j (cider-jack-in-clj) start a nREPL and jack in. It works in a project or with a sole .clj file. M-x cider-connect-clj run the command and then fill in hostname and port.</description>
    </item>
    <item>
      <title>A Few Quick Notes About babashka/fs</title>
      <link>https://whatacold.io/blog/2024-12-07-babashka-fs-notes/</link>
      <pubDate>Sat, 07 Dec 2024 22:24:41 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-12-07-babashka-fs-notes/</guid>
      <description>Recently I&amp;#39;ve used babashka/fs a little bit, here are some quick notes for it:&#xA;Path vs File. Use Path whenever possible, according to this SO answer to &amp;#34;Java: Path vs File&amp;#34;. This is actually Java related. It&amp;#39;s ok to use a path as a key for a clojure map. At my first try, I somehow came to the conclusion that it&amp;#39;s not ok, while I was refactoring the live reload for clay.</description>
    </item>
    <item>
      <title>Doing Unit test in Clojure Is Easy</title>
      <link>https://whatacold.io/blog/2024-11-27-clojure-unit-test/</link>
      <pubDate>Thu, 28 Nov 2024 23:10:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-27-clojure-unit-test/</guid>
      <description>While refactoring the live reload feature of Clay, I realized I&amp;#39;d better break long functions into smaller and functional ones (as many as I can), which is also a common practice in the clojure community.&#xA;Small pure functions not only are easy to verify on the development process (using a REPL), but also are easy to test. And unit tests are easy to write in clojure, just use deftest from clojure.</description>
    </item>
    <item>
      <title>clj-async-profiler Rocks</title>
      <link>https://whatacold.io/blog/2024-11-28-beholder-clj-async-profiler/</link>
      <pubDate>Thu, 28 Nov 2024 22:23:32 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-28-beholder-clj-async-profiler/</guid>
      <description>While developing the live reload feature for Clay, a minimalistic Clojure tool for data visualization and literate programming, I found that it constantly takes ~1 minute for beholder to watch a directory. After some code inspect, I was still having no idea why it happened.&#xA;So I decided to use a profiler to find out what&amp;#39;s going one under the hood, and Google immediately took me to clj-async-profiler. It&amp;#39;s easy to set up following its basic usage docs:</description>
    </item>
    <item>
      <title>Adding Clojure Dependencies from the Command Line</title>
      <link>https://whatacold.io/blog/2024-11-09-clj-deps-cmdline/</link>
      <pubDate>Sat, 09 Nov 2024 21:02:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-09-clj-deps-cmdline/</guid>
      <description>While debugging a live reload issue of Clay a few days ago, I learned from Markus Agwin that we can actually add dependencies on the fly from the command line, just like this: clj -Sdeps &amp;#34;{:deps {org.scicloj/clay {:mvn/version \&amp;#34;2-beta21\&amp;#34;}}}&amp;#34;.&#xA;Even better, we can add dependency from a Git repo and specify the commit hash: clj -Sdeps &amp;#34;{:deps {io.github.scicloj/clay {:git/url \&amp;#34;https://github.com/scicloj/clay.git\&amp;#34; :git/sha \&amp;#34;35a46541db66ae6b4e1af628b7c24c42d3be418f\&amp;#34;}}}&amp;#34;, which is really helpful for experimenting and verifying things.</description>
    </item>
    <item>
      <title>Bitten by Lazy Sequence of map</title>
      <link>https://whatacold.io/blog/2024-11-10-clojure-lazy-seq-case/</link>
      <pubDate>Sat, 09 Nov 2024 21:02:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-10-clojure-lazy-seq-case/</guid>
      <description>While impletenting the live reload feature for Clay a few weeks ago, unfortunately, I was bitten by the laziness of map. It seems quite obvious we all know that its result is a lazy sequence, but I just can&amp;#39;t help fall into the &amp;#34;trap&amp;#34;.&#xA;At that time I was adding a vector to keep track of all beholder instances watching file changes in user specified directories. So then when it&amp;#39;s time to stop all the watchers, I used something like to achieve the goal:</description>
    </item>
    <item>
      <title>Anonymous Functions in Thread Macros</title>
      <link>https://whatacold.io/blog/2024-11-08-clojure-thread-macro-anonymous-function/</link>
      <pubDate>Fri, 08 Nov 2024 21:02:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-08-clojure-thread-macro-anonymous-function/</guid>
      <description>While adding the live reload feature to Clay, I encountered a problem of applying anonymous functions to thread macros. For example, below is a simple snippet trying to wrap the input directory as a vector with the help of thread macro, but surprisingly, it errors out. After some searching, I figured out that I need to put the anonymous function into another pair of parentheses:&#xA;(-&amp;gt; &amp;#34;/tmp/&amp;#34; #(if (vector? %) % [%])) ;; =&amp;gt; Syntax error (ClassCastException) compiling fn* at (simple4all.</description>
    </item>
    <item>
      <title>Start a Clojure nREPL in the Command Line for Cider</title>
      <link>https://whatacold.io/blog/2024-11-08-cider-clojure-repl-cmdline/</link>
      <pubDate>Fri, 08 Nov 2024 00:02:56 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2024-11-08-cider-clojure-repl-cmdline/</guid>
      <description>While troubleshooting and fixing a live reload bug in Clay today, which requires to start a minimal Clojure environment, I figured out how to start a nREPL from the command line. Instead of using M-x cider-jack-in-clj directly from Emacs, actually we can manully bring up an nREPL with this: clj -Sdeps &amp;#34;{:deps {org.scicloj/clay {:mvn/version \&amp;#34;2-beta21\&amp;#34;} cider/cider-nrepl {:mvn/version \&amp;#34;0.50.2\&amp;#34;}}}&amp;#34; -m nrepl.cmdline --middleware &amp;#34;[cider.nrepl/cider-middleware]&amp;#34; (The clay part is only necessary for this debugging), and then connect to this nREPL using the Emacs command M-x cider-connect-clj.</description>
    </item>
    <item>
      <title>Clojure reduce: one case for text processing</title>
      <link>https://whatacold.io/blog/2021-09-19-clojure-reduce-text-processing/</link>
      <pubDate>Sun, 19 Sep 2021 10:39:23 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2021-09-19-clojure-reduce-text-processing/</guid>
      <description>As a practice, I managed to illustrate Clojure files using illustrate.clj, but my original idea was to annotate org-mode files of blogs. It&amp;#39;s not uncommon that a blog post has some code snippets.&#xA;But it missed the feature until last night, as I wasn&amp;#39;t sure how to implement it appropriately before and didn&amp;#39;t have enough time.&#xA;For example, I may have an org-mode like this:&#xA;sum of two numbers: #+begin_src clojure (+ 1 2) #+end_src I want to have a result comment ((;; =&amp;gt; 3)) after each top-level form after using illustrate.</description>
    </item>
    <item>
      <title>illustrate.clj to Illustrate Clojure Snippet</title>
      <link>https://whatacold.io/blog/2021-08-07-illustrate-clojure-snippet/</link>
      <pubDate>Sat, 07 Aug 2021 18:49:25 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2021-08-07-illustrate-clojure-snippet/</guid>
      <description>To get my hands dirty with Clojure, I am trying to find or implement Clojure&amp;#39;s string functions in the sense of Python. Python has powerful string APIs, and I also want to see how powerful Clojure could be in this field. That would be interesting.&#xA;As shown in the cheatsheet, Clojure has implemented most of them, and there are some that I have to implement myself, like title-case.&#xA;Along the way, I found it was a little cumbersome to append the evaluation result and the result of calling them, for example,</description>
    </item>
    <item>
      <title>String Title Case in Clojure</title>
      <link>https://whatacold.io/blog/2021-07-25-clojure-string-title-case/</link>
      <pubDate>Sun, 25 Jul 2021 11:51:39 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2021-07-25-clojure-string-title-case/</guid>
      <description>These days I like to write scripts for some tasks in Python instead of shell. One important reason I think that&amp;#39;s because Python is powerful at string manipulation.&#xA;Recently I&amp;#39;m learning Clojure, and I&amp;#39;m trying to find similar ways in Clojure, one of them is s.title() for getting a title-cased version of a string. For example,&#xA;&amp;gt;&amp;gt;&amp;gt; &amp;#39; Hello world&amp;#39;.title() &amp;#39; Hello World&amp;#39; How to do that in Clojure? To make the problem simple, let&amp;#39;s assume that the input string only has letters and spaces, that is, [a-zA-Z ] in regex pattern.</description>
    </item>
    <item>
      <title>String Manipulation in Clojure</title>
      <link>https://whatacold.io/blog/2021-07-22-clojure-string-manipulation/</link>
      <pubDate>Thu, 22 Jul 2021 23:29:11 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2021-07-22-clojure-string-manipulation/</guid>
      <description>Python string APIs are powerful and concise, that is an important reason I use it to do a lot of scripting these days, join, split, strip, to name a few.&#xA;Since I am learning Clojure recently, I am wondering, how is string manipulation like in Clojure and how to implement equivalent ones?&#xA;I think it&amp;#39;s an excellent opportunity to get familiar with Clojure. Before diving into the implementation, how to declare a multi-line string?</description>
    </item>
    <item>
      <title>A Random Password Generator in Babashka</title>
      <link>https://whatacold.io/blog/2021-07-11-babashka-random-password-generator/</link>
      <pubDate>Sun, 11 Jul 2021 09:18:41 +0800</pubDate><author>whatacold@gmail.com (Ken Huang)</author>
      <guid>https://whatacold.io/blog/2021-07-11-babashka-random-password-generator/</guid>
      <description>I&amp;#39;m used to learning by practicing, so when I learned Clojure, I always kept an eye on chances to write code in it.&#xA;Scripting is an excellent field to practice, but the experience is not so good. On the one hand, it&amp;#39;s too hacky to wrap Clojure code in a shell script with the shell bang. On the other hand, the startup time of JVM is too long to hurt the user experience.</description>
    </item>
  </channel>
</rss>
