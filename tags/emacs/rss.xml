<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on whatacold&#39;s space</title>
    <link>https://whatacold.io/tags/emacs/</link>
    <description>Recent content in Emacs on whatacold&#39;s space</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>whatacold@gmail.com (whatacold)</managingEditor>
    <webMaster>whatacold@gmail.com (whatacold)</webMaster>
    <lastBuildDate>Sat, 22 Jan 2022 11:36:18 +0800</lastBuildDate><atom:link href="https://whatacold.io/tags/emacs/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Eglot for better programming experience in Emacs</title>
      <link>https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/</link>
      <pubDate>Sat, 22 Jan 2022 11:36:18 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/</guid>
      <description>LSP, or Language Server Protocol, makes programming easier by features like better auto-completion and definition lookup. It may have scratched your itches, and you are wondering what the experience is like in Emacs.
 Emacs has mainly two LSP clients out there, eglot and lsp-mode. eglot is lightweight, and it could almost run out of the box.
 As a user, we only need to know these commands to get started of eglot:</description>
    </item>
    
    <item>
      <title>Language Shadowing with subed in Emacs</title>
      <link>https://whatacold.io/blog/2022-01-12-language-shadowing-with-subed-emacs/</link>
      <pubDate>Wed, 12 Jan 2022 21:41:54 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2022-01-12-language-shadowing-with-subed-emacs/</guid>
      <description>So I&amp;#39;m trying to improve my English speaking skill by shadowing while watching TV episodes. The workflow before was to loop over video clips using mpv:
  hit l to mark the start of the loop
  play the video and wait for it to be at the end of the loop
  hit l again to mark the end
  Then mpv will loop over the clip, it basically works, but it&amp;#39;s a bit hard and tedious to set the start and end precisely.</description>
    </item>
    
    <item>
      <title>Writing a Python Script in Emacs in 45 Minutes!</title>
      <link>https://whatacold.io/blog/2021-12-11-writing-python-in-emacs/</link>
      <pubDate>Sat, 11 Dec 2021 09:24:53 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-12-11-writing-python-in-emacs/</guid>
      <description>Note: watch my live coding session of this article:   Intro   If you&amp;#39;ve heard some rumors of Emacs that it has a very steep learning curve (or that Emacs makes a computer slow), you may be too scared to look at it. It indeed has some learning curve (learning anything does have one), but it isn&amp;#39;t very steep. I learned this after getting my hands dirty with Emacs a few years ago.</description>
    </item>
    
    <item>
      <title>Send Notifications from Emacs with i3wm and Dunst</title>
      <link>https://whatacold.io/blog/2021-07-17-emacs-i3wm-dunst/</link>
      <pubDate>Sat, 17 Jul 2021 12:22:10 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2021-07-17-emacs-i3wm-dunst/</guid>
      <description>I barely use notifications, but recently I think it&amp;#39;s a valuable way to remind me things like helping me nurture habits, or to notify me of emergencies like a critically low laptop battery.
 So I try to integrate notifications to org-mode and Emacs today.
 I knew the built-in org-notify could do this job easily before, so I first test it in the minibuffer with (org-notify &amp;#34;test&amp;#34;).
 Unfortunately, it errors out:</description>
    </item>
    
    <item>
      <title>Generate Call Graphs Using Doxygen in Emacs</title>
      <link>https://whatacold.io/blog/2020-08-22-generate-call-graphs-using-doxygen-in-emacs/</link>
      <pubDate>Sat, 22 Aug 2020 18:57:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-08-22-generate-call-graphs-using-doxygen-in-emacs/</guid>
      <description>Doxygen is a nice tool for generating documentations for well-annotated C/C++ projects, the one feature that I like most is generating call graphs and class diagrams, so that I can learn a project quickly by browsing the diagrams from a higher point of view.
 I take the following steps to generate call graphs for a project on terminals on Linux:
  cd /path/to/a/project/, and generate a template config file by doxygen -s -g doxygen.</description>
    </item>
    
    <item>
      <title>A Trick to Troubleshoot Emacs Subprocess Creating</title>
      <link>https://whatacold.io/blog/2020-05-30-a-trick-to-troubleshoot-emacs-subprocess-creating/</link>
      <pubDate>Sat, 30 May 2020 11:52:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-05-30-a-trick-to-troubleshoot-emacs-subprocess-creating/</guid>
      <description>There are many packages of Emacs that leverage subprocesses to do their jobs, Magit, eglot, elpy, to name a few. And there are times that a subprocess doesn&amp;#39;t work as expected, for example, Magit is slow, and you&amp;#39;re sure that it&amp;#39;s ok when running git commands on shell. So how to spot these problems effectively and quickly?
 The problem is that we don&amp;#39;t know what&amp;#39;s going on exactly, so here I want to share a few Elisp advices to make the subprocess creating visible, and print the exact program and its arguments to the *Message* buffer.</description>
    </item>
    
    <item>
      <title>ppcompile: An Emacs Package to Help Coding Locally</title>
      <link>https://whatacold.io/blog/2020-03-07-ppcompile-to-help-stay-coding-locally/</link>
      <pubDate>Sat, 07 Mar 2020 23:50:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2020-03-07-ppcompile-to-help-stay-coding-locally/</guid>
      <description>If you are a C/C++ programmer like me, you may experience jumping around different machines to write and compile your code, or you may write code on different machines for different projects, and scp/rsync/ftp the projects around. It works, but it&amp;#39;s a bit tedious and takes too much burden on our brains.
 For example, say I have two projects that should be compiled on their compiling machines respectively. There are two obvious workflows for writing code for them &amp;#34;simultaneously&amp;#34;:</description>
    </item>
    
    <item>
      <title>How To Revert a Series of Git Commits?</title>
      <link>https://whatacold.io/blog/2019-09-24-how-to-revert-a-series-of-commits-with-git/</link>
      <pubDate>Tue, 24 Sep 2019 23:14:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-09-24-how-to-revert-a-series-of-commits-with-git/</guid>
      <description>Sometimes, I need to revert a series of commits that I&amp;#39;ve already pushed, doing a git hard reset (git reset --hard) is not an option, as someone may already have new commits based on mine.
 For example, assume that I&amp;#39;ve made a few commits like below:
65a2c62 * commit 10 25cad43 * commit 9 72ad583 * commit 8 ceebf9a * commit 7 acf8a11 * commit 6 28d526f * commit 5 63af1e2 * commit 4 982c71c * commit 3 0fb4c2d * commit 2 acf9da1 * commit 1 b5f9933 * commit 0   For whatever reason, I need to &amp;#34;drop&amp;#34; the changes made by commit 6 to commit 10, that is, go back to &amp;#34;commit 5&amp;#34; without deleting these commits.</description>
    </item>
    
    <item>
      <title>Generating org-mode Outlines for wikiHow Articles</title>
      <link>https://whatacold.io/blog/2019-07-20-generating-org-mode-outlines-for-wikihow-articles/</link>
      <pubDate>Sat, 20 Jul 2019 20:04:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-07-20-generating-org-mode-outlines-for-wikihow-articles/</guid>
      <description>Recently I found some great articles on wikiHow, then I want to keep notes of them in org-mode files.
 At first, I manually copied the ToC of articles, but soon I found it&amp;#39;s tedious and takes a lot of time. Today I wrote a requests-based Python script to help me extract the ToCs (Table of Content) into org-mode outlines. It takes two arguments, the first one is the URL, the second one is the containing heading&amp;#39;s level for the generated ToC in org-mode.</description>
    </item>
    
    <item>
      <title>Understanding align-regexp of Emacs</title>
      <link>https://whatacold.io/blog/2019-07-20-understanding-align-regexp-of-emacs/</link>
      <pubDate>Sat, 20 Jul 2019 13:50:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-07-20-understanding-align-regexp-of-emacs/</guid>
      <description>Emacs&amp;#39; M-x align-regex is neat when I want to align some similar text, especially when we&amp;#39;re coding. I use its trivial version(without prefix arg) regularly on day-to-day programming work before.
 For example, I can use it to align below code quickly by:
  Choose the region
  M-x align-regexp and type = and Enter
  aaaaaaaaaaaaaa = fields[0] bbb = fields[1] cccccccc = fields[2]   It will be aligned to below code, now it&amp;#39;s better to read:</description>
    </item>
    
    <item>
      <title>Fine-tune Curly Braces Style of yasnippet Snippet on the Fly</title>
      <link>https://whatacold.io/blog/2019-02-24-fine-tune-style-of-yasnippet-snippet-on-the-fly/</link>
      <pubDate>Sun, 24 Feb 2019 16:48:00 +0800</pubDate>
      <author>whatacold@gmail.com (whatacold)</author>
      <guid>https://whatacold.io/blog/2019-02-24-fine-tune-style-of-yasnippet-snippet-on-the-fly/</guid>
      <description>Yasnippet is a good friend to help us type less and write more, whenever we write some text snippets repeatedly. And there is also an official repository called yasnippet-snippets that contains various snippets for many programming languages(modes), so that we can have many snippets in no time by installing it.
 But there is a little problem when it comes to conforming to different coding styles. Take the if snippet for example, normally it will generate code like this:</description>
    </item>
    
  </channel>
</rss>
